// Generated by CoffeeScript 1.8.0
(function() {
  var BookmarkCompleter, DomainCompleter, HistoryCache, HistoryCompleter, MultiCompleter, RankingUtils, RegexpCache, SearchEngineCompleter, Suggestion, TabCompleter, root,

  Suggestion = (function() {
    Suggestion.prototype.showRelevancy = false;

    function Suggestion(queryTerms, type, url, text, title, computeRelevancy) {
      this.queryTerms = queryTerms;
      this.type = type;
      this.url = url;
      this.text = text || url;
      this.title = title || "";
      this.favIconUrl = null;
      this.html = null;
      this.relevancy = computeRelevancy(this);
    }

    Suggestion.prototype.generateHtml = function() {
      if (this.html) {
        return;
      }
      this.favIconUrl || (this.favIconUrl = this.getUrlFavicon());
      var relevancyHtml = this.showRelevancy ? "\n      <span class='relevancy'>" + this.relevancy + "</span>" : "";
      this.html = "<div class=\"vimiumReset vomnibarTopHalf\">\n      <span class=\"vimiumReset vomnibarSource\">"
        + this.type + "</span>\n      <span class=\"vimiumReset vomnibarTitle\">" + this.highlightTerms(this.title)
        + "</span>\n    </div>\n    <div class=\"vimiumReset vomnibarBottomHalf vomnibarIcon\" style=\"background-image: url(" + this.favIconUrl
        + ");\">\n      <span class=\"vimiumReset vomnibarUrl\">" + this.highlightTerms(this.shortenUrl(this.text))
        + "</span>" + relevancyHtml + "\n    </div>";
    };

    Suggestion.domA = document.createElement('a');
    Suggestion.prototype.getUrlFavicon = function() {
      var a = Suggestion.domA;
      a.href = this.url;
      return "chrome://favicon/" + a.protocol + "//" + a.hostname;
    };

    Suggestion.getUrlRoot = function(url) {
      var a = Suggestion.domA;
      a.href = url;
      return a.protocol + "//" + a.hostname;
    };

    Suggestion.prototype.shortenUrl = function(url) {
      if (url.charCodeAt(url.length - 1) === 47) { // '/'
        url = url.substring(0, url.length - 1);
      }
      return url.replace(/^https?:\/\//, "");
    };

    Suggestion.prototype.pushMatchingRanges = function(string, term, ranges) {
      var index = 0, textPosition = 0, matchedEnd,
        splits = string.split(RegexpCache.get(term, "(", ")")),
        _ref = splits.length - 2;
      for (; index <= _ref; index += 2) {
        matchedEnd = (textPosition += splits[index].length) + splits[index + 1].length;
        ranges.push([textPosition, matchedEnd]);
        textPosition = matchedEnd;
      }
    };

    Suggestion.prototype.highlightTerms = function(string) {
      var ranges = [], _i, _len, start, end;
      for (_i = 0, _len = this.queryTerms.length; _i < _len; ++_i) {
        this.pushMatchingRanges(string, this.queryTerms[_i], ranges);
      }
      if (ranges.length === 0) {
        return Utils.escapeHtml(string);
      }
      ranges = this.mergeRanges(ranges.sort(function(a, b) {
        return a[0] - b[0];
      }));
      _len = [];
      for(_i = 0, end = 0; _i < ranges.length; ++_i) {
        start = ranges[_i][0];
        _len.push(Utils.escapeHtml(string.substring(end, start)));
        end = ranges[_i][1];
        _len.push("<span class=\"vimiumReset vomnibarMatch\">");
        _len.push(Utils.escapeHtml(string.substring(start, end)));
        _len.push("</span>");
      }
      _len.push(Utils.escapeHtml(string.substring(end)));
      return _len.join("");
    };

    Suggestion.prototype.mergeRanges = function(ranges) {
      var mergedRanges, previous;
      previous = ranges.shift();
      mergedRanges = [previous];
      ranges.forEach(function(range) {
        if (previous[1] >= range[0]) {
          previous[1] = Math.max(range[1], previous[1]);
        } else {
          mergedRanges.push(range);
          previous = range;
        }
      });
      return mergedRanges;
    };

    return Suggestion;
  })();

  BookmarkCompleter = (function() {
    function BookmarkCompleter() {}

    BookmarkCompleter.prototype.folderSeparator = "/";

    BookmarkCompleter.prototype.filter = function(queryTerms, onComplete) {
      this.queryTerms = queryTerms;
      this.onComplete = onComplete;
      this.currentSearch = {
        queryTerms: this.queryTerms,
        onComplete: this.onComplete
      };
      if (this.bookmarks) {
        this.performSearch();
      }
    };

    BookmarkCompleter.prototype.onBookmarksLoaded = function() {
      if (this.currentSearch) {
        this.performSearch();
      }
    };

    BookmarkCompleter.prototype.performSearch = function() {
      if (this.currentSearch.queryTerms.length == 0) {
        var onComplete = this.currentSearch.onComplete;
        this.currentSearch = null;
        onComplete([]);
        return;
      }
      var q = this.currentSearch.queryTerms, c = this.computeRelevancy, results, usePathAndTitle;
      usePathAndTitle = this.currentSearch.queryTerms.join("").indexOf(this.folderSeparator) >= 0;
      results = this.bookmarks.filter(usePathAndTitle ? function(i) {
        return RankingUtils.matches(q, i.text + '\n' + i.path);
      } : function(i) {
        return RankingUtils.matches(q, i.text + '\n' + i.title);
      }).map(usePathAndTitle ? function(i) {
        return new Suggestion(q, "bookm", i.url, i.text, i.path, c);
      } : function(i) {
        return new Suggestion(q, "bookm", i.url, i.text, i.title, c);
      });
      var onComplete = this.currentSearch.onComplete;
      this.currentSearch = null;
      onComplete(results);
    };

    BookmarkCompleter.prototype.refresh = function() {
      var _this = this;
      this.bookmarks = null;
      chrome.bookmarks.getTree(function(bookmarks) {
        _this.bookmarks = _this.traverseBookmarks(bookmarks).filter(function(bookmark) {
          return bookmark.url;
        });
        Decoder.decodeList(_this.bookmarks);
        _this.onBookmarksLoaded();
      });
    };

    BookmarkCompleter.prototype.ignoreTopLevel = {
      "Other Bookmarks": true,
      "\u5176\u4ED6\u4E66\u7B7E": true,
      "Bookmarks Bar": true,
      "\u4E66\u7B7E\u680F": true,
      "Mobile Bookmarks": true
    };

    BookmarkCompleter.prototype.traverseBookmarks = function(bookmarks) {
      var results = [], _this = this;
      bookmarks.forEach(function(folder) {
        _this.traverseBookmarksRecursive(folder, results, { path: "" });
      });
      return results;
    };

    BookmarkCompleter.prototype.traverseBookmarksRecursive = function(bookmark, results, parent) {
      bookmark.path = bookmark.title && !(parent.path === "" && this.ignoreTopLevel[bookmark.title]) ? parent.path + this.folderSeparator + bookmark.title : parent.path;
      results.push(bookmark);
      if (bookmark.children) {
        var _this = this;
        bookmark.children.forEach(function(child) {
          _this.traverseBookmarksRecursive(child, results, bookmark);
        });
      }
    };

    BookmarkCompleter.prototype.computeRelevancy = function(suggestion) {
      return RankingUtils.wordRelevancy(suggestion.queryTerms, suggestion.text, suggestion.title);
    };

    return BookmarkCompleter;

  })();

  HistoryCompleter = (function() {
    function HistoryCompleter() {}
    
    HistoryCompleter.prototype.filter = function(queryTerms, onComplete) {
      var _this = this;
      if (queryTerms.length > 0) {
        HistoryCache.use(function(history) {
          onComplete(history.filter(function(entry) {
            return RankingUtils.matches(queryTerms, entry.text + '\n' + entry.title);
          }).map(function(i) {
            return new Suggestion(queryTerms, "history", i.url, i.text, i.title, _this.computeRelevancy);
          }));
        });
        return;
      }
      if (chrome.sessions) {
        chrome.sessions.getRecentlyClosed(null, function(sessions) {
          var historys = [], arr = {};
          sessions.forEach(function(entry) {
            if (!entry.tab || entry.tab.url in arr) { return; }
            entry.tab.lastVisitTime = entry.lastModified * 1000 + 60999;
            entry = entry.tab;
            arr[entry.url] = 1;
            historys.push(entry);
          });
          _this.filterFill(historys, onComplete, arr);
        });
        return;
      }
      chrome.windows.getCurrent(function(window) {
        var historys = [], arr = {}, tabQueue = root.tabQueue;
        window = window.id;
        if (tabQueue[window] && tabQueue[window].length > 0) {
          window = tabQueue[window];
          var i = window.length - 1, entry;
          do {
            entry = window[i];
            if (!entry.url || entry.url in arr) { continue; }
            arr[entry.url] = 1;
            historys.push({
              url: entry.url,
              title: entry.title,
              lastVisitTime: entry.lastVisitTime + 60000,
              sessionId: i
            });
          } while (--i >= 0 && historys.length < MultiCompleter.maxResults);
        }
        _this.filterFill(historys, onComplete, arr);
      });
    };
    
    HistoryCompleter.prototype.filterFill = function(historys, onComplete, arr) {
      if (historys.length >= MultiCompleter.maxResults) {
        this.filterFinish(historys, onComplete);
        return;
      }
      var _this = this;
      chrome.history.search({
        text: "",
        maxResults: MultiCompleter.maxResults
      }, function(historys2) {
        var a = arr;
        historys2 = historys2.filter(function(i) {
          return !(i.url in a);
        });
        historys = historys.concat(historys2);
        _this.filterFinish(historys, onComplete);
      });
    };
    
    HistoryCompleter.prototype.filterFinish = function(historys, onComplete) {
      var s = Suggestion, c = this.computeRelevancyByTime, d = Decoder.decodeURL;
      onComplete(historys.sort(function(a, b) {
        return b.lastVisitTime - a.lastVisitTime;
      }).slice(0, MultiCompleter.maxResults).map(function(e) {
        var o = new s([], "history", e.url, d(e.url), e.title, c);
        o.lastVisitTime = e.lastVisitTime;
        e.sessionId && (o.sessionId = e.sessionId);
        return o;
      }));
    };

    HistoryCompleter.prototype.computeRelevancy = function(suggestion) {
      var recencyScore = RankingUtils.recencyScore(suggestion.lastVisitTime),
        wordRelevancy = RankingUtils.wordRelevancy(suggestion.queryTerms, suggestion.text, suggestion.title);
      return recencyScore <= wordRelevancy ? wordRelevancy : (wordRelevancy + recencyScore) / 2;
    };

    HistoryCompleter.prototype.computeRelevancyByTime = function(suggestion) {
      return RankingUtils.recencyScore(suggestion.lastVisitTime);
    };

    return HistoryCompleter;

  })();

  DomainCompleter = (function() {
    function DomainCompleter() {}

    DomainCompleter.prototype.filter = function(queryTerms, onComplete) {
      if (queryTerms.length !== 1) {
        onComplete([]);
      } else if (this.domains) {
        this.performSearch(queryTerms, onComplete);
      } else {
        var _this = this;
        this.populateDomains(function() {
          _this.performSearch(queryTerms, onComplete);
        });
      }
    };

    DomainCompleter.prototype.performSearch = function(queryTerms, onComplete) {
      var domain, domainCandidates = [], query = queryTerms[0];
      for (domain in this.domains) {
        if (domain.indexOf(query) >= 0) {
          domainCandidates.push(domain);
        }
      }
      if (domainCandidates.length === 0) {
        onComplete([]);
        return;
      }
      domain = Suggestion.getUrlRoot(this.domains[this.firstDomainByRelevancy(queryTerms, domainCandidates)].entry.url);
      onComplete([new Suggestion(queryTerms, "domain", domain, domain, null, this.computeRelevancy)]);
    };

    DomainCompleter.prototype.firstDomainByRelevancy = function(queryTerms, domainCandidates) {
      var domain, recencyScore, wordRelevancy, score, _i, _len, result = "", result_score = -1;
      for (_i = 0, _len = domainCandidates.length; _i < _len; ++_i) {
        domain = domainCandidates[_i];
        recencyScore = RankingUtils.recencyScore(this.domains[domain].entry.lastVisitTime || 0);
        wordRelevancy = RankingUtils.wordRelevancy(queryTerms, domain, null);
        score = recencyScore <= wordRelevancy ? wordRelevancy : (wordRelevancy + recencyScore) / 2;
        if (score > result_score) {
          result_score = score;
          result = domain;
        }
      }
      return result;
    };

    DomainCompleter.prototype.populateDomains = function(onComplete) {
      var _this = this;
      HistoryCache.use(function(history) {
        _this.domains = {};
        history.forEach(function(entry) {
          _this.onPageVisited(entry);
        });
        var ret = chrome.history.onVisited.addListener(_this.onPageVisited.bind(_this));
        chrome.history.onVisitRemoved.addListener(_this.onVisitRemoved.bind(_this));
        onComplete();
      });
    };

    DomainCompleter.prototype.onPageVisited = function(newPage) {
      var domain = newPage.url.split("/", 3)[2];
      if (domain) {
        var slot = this.domains[domain];
        if (slot) {
          if (slot.entry.lastVisitTime < newPage.lastVisitTime) {
            slot.entry = newPage;
          }
          ++ slot.referenceCount;
        } else {
          this.domains[domain] = {
            entry: newPage,
            referenceCount: 1
          };
        }
      }
    };

    DomainCompleter.prototype.onVisitRemoved = function(toRemove) {
      if (toRemove.allHistory) {
        this.domains = {};
        return;
      }
      var domains = this.domains;
      toRemove.urls.forEach(function(url) {
        var domain = url.split("/", 3)[2];
        if (domain && domains[domain] && (-- domains[domain].referenceCount) === 0) {
          delete domains[domain];
        }
      });
    };

    DomainCompleter.prototype.computeRelevancy = function() {
      return 9;
    };

    return DomainCompleter;

  })();

  TabCompleter = (function() {

    function TabCompleter() {}

    TabCompleter.prototype.filter = function(queryTerms, onComplete) {
      var _this = this;
      chrome.tabs.query({}, function(tabs) {
        var results, suggestions;
        results = tabs.filter(function(tab) {
          var text = Decoder.decodeURL(tab.url);
          if (RankingUtils.matches(queryTerms, text + '\n' + tab.title)) {
            tab.text = text;
            return true;
          }
          return false;
        });
        suggestions = results.map(function(tab) {
          var suggestion = new Suggestion(queryTerms, "tab", tab.url, tab.text, tab.title, _this.computeRelevancy);
          suggestion.tabId = tab.id;
          suggestion.favIconUrl = tab.favIconUrl;
          return suggestion;
        });
        onComplete(suggestions);
      });
    };

    TabCompleter.prototype.computeRelevancy = function(suggestion) {
      return RankingUtils.wordRelevancy(suggestion.queryTerms, suggestion.text, suggestion.title);
    };

    return TabCompleter;

  })();

  SearchEngineCompleter = (function() {
    function SearchEngineCompleter() {}

    SearchEngineCompleter.prototype.filter = function(queryTerms, onComplete) {
      var searchEngineMatch, query2, suggestions = [];
      searchEngineMatch = this.getSearchEngineMatches(queryTerms[0]);
      if (searchEngineMatch) {
        query2 = queryTerms.slice(1).join(" ");
        searchEngineMatch = Utils.createSearchUrl(searchEngineMatch, query2);
        suggestions.push(new Suggestion(queryTerms, "search", searchEngineMatch, searchEngineMatch
          , this.getSearchEngineName(queryTerms[0]) + ": " + query2, this.computeRelevancy));
      }
      onComplete(suggestions);
    };

    SearchEngineCompleter.prototype.computeRelevancy = function() {
      return 1;
    };

    SearchEngineCompleter.prototype.refresh = function() {
      this.searchEngines = Settings.getSearchEngines();
    };

    SearchEngineCompleter.prototype.getSearchEngineMatches = function(queryTerm) {
      return this.searchEngines[queryTerm];
    };
    
    SearchEngineCompleter.prototype.getSearchEngineName = function(queryTerm) {
      return this.searchEngines[":"][queryTerm];
    };

    return SearchEngineCompleter;

  })();

  MultiCompleter = (function() {
    function MultiCompleter(completers) {
      this.completers = completers;
    }

    MultiCompleter.maxResults = 10;
    
    MultiCompleter.prototype.refresh = function() {
      for (var completer, _i = 0, _len = this.completers.length; _i < _len; ++_i) {
        completer = this.completers[_i];
        if (completer.refresh) {
          completer.refresh();
        }
      }
    };

    MultiCompleter.prototype.filter = function(queryTerms, onComplete) {
      if (this.mostRecentQuery) {
        if (arguments.length !== 0) {
          this.mostRecentQuery = {
            queryTerms: queryTerms,
            onComplete: onComplete
          };
          return;
        }
        queryTerms = this.mostRecentQuery.queryTerms;
        onComplete = this.mostRecentQuery.onComplete;
      }
      RegexpCache.clear();
      this.mostRecentQuery = true;
      var counter = this.completers.length, suggestions = [], _this = this;
      this.completers.forEach(function(completer) {
        completer.filter(queryTerms, function(newSuggestions) {
          suggestions = suggestions.concat(newSuggestions);
          --counter;
          if (counter > 0) { return; }
          
          newSuggestions = null;
          suggestions.sort(function(a, b) { return b.relevancy - a.relevancy; });
          suggestions = suggestions.slice(0, MultiCompleter.maxResults);
          suggestions.forEach(function(suggestion) {
            suggestion.generateHtml();
            delete suggestion.queryTerms;
          });
          onComplete(suggestions);
          suggestions = null;
          if (typeof _this.mostRecentQuery === "object") {
            setTimeout(_this.filter.bind(_this), 0);
          } else {
            _this.mostRecentQuery = false;
          }
        });
      });
    };

    return MultiCompleter;

  })();

  RankingUtils = {
    matches: function(queryTerms, thing) {
      var matchedTerm, regexp, _i, _len;
      for (_i = 0, _len = queryTerms.length; _i < _len; ++_i) {
        regexp = RegexpCache.get(queryTerms[_i], "", "");
        if (! thing.match(regexp)) {
          return false;
        }
      }
      return true;
    },
    matchWeights: {
      matchAnywhere: 1,
      matchStartOfWord: 1,
      matchWholeWord: 1,
      maximumScore: 3,
      recencyCalibrator: 2.0 / 3.0
    },
    scoreTerm: function(term, string) {
      var count, nonMatching, score;
      score = 0;
      count = 0;
      nonMatching = string.split(RegexpCache.get(term, "", ""));
      if (nonMatching.length > 1) {
        score = this.matchWeights.matchAnywhere;
        count = nonMatching.reduce((function(p, c) {
          return p - c.length;
        }), string.length);
        if (RegexpCache.get(term, "\\b", "").test(string)) {
          score += this.matchWeights.matchStartOfWord;
          if (RegexpCache.get(term, "\\b", "\\b").test(string)) {
            score += this.matchWeights.matchWholeWord;
          }
        }
      }
      return [score, count < string.length ? count : string.length];
    },
    wordRelevancy: function(queryTerms, url, title) {
      var c, maximumPossibleScore, s, term, titleCount, titleScore, urlCount, urlScore, _i, _len, _ref, _ref1;
      urlScore = titleScore = 0.0;
      urlCount = titleCount = 0;
      for (_i = 0, _len = queryTerms.length; _i < _len; ++_i) {
        term = queryTerms[_i];
        _ref = this.scoreTerm(term, url), s = _ref[0], c = _ref[1];
        urlScore += s;
        urlCount += c;
        if (title) {
          _ref1 = this.scoreTerm(term, title), s = _ref1[0], c = _ref1[1];
          titleScore += s;
          titleCount += c;
        }
      }
      maximumPossibleScore = this.matchWeights.maximumScore * queryTerms.length + 0.01;
      urlScore /= maximumPossibleScore;
      urlScore *= this.normalizeDifference(urlCount, url.length);
      if (!title) {
        return urlScore;
      }
      titleScore /= maximumPossibleScore;
      titleScore *= this.normalizeDifference(titleCount, title.length);
      return (urlScore < titleScore) ? titleScore : ((urlScore + titleScore) / 2);
    },
    timeCalibrator: 1000 * 60 * 60 * 24,
    timeAgo: Date.now() - 1000 * 60 * 60 * 24,
    recencyScore: function(lastAccessedTime) {
      var score = Math.max(0, lastAccessedTime - this.timeAgo) / this.timeCalibrator;
      return score * score * score * this.matchWeights.recencyCalibrator;
    },
    normalizeDifference: function(a, b) {
      var max = Math.max(a, b);
      return (max - Math.abs(a - b)) / max;
    }
  };

  RegexpCache = {
    escapeRegExp: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    cache: {},
    clear: function() {
      this.cache = {};
    },
    get: function(s, p, n) {
      var r = p + s.toLowerCase().replace(this.escapeRegExp, "\\$&") + n, v;
      return (v = this.cache)[r] || (v[r] = new RegExp(r, (Utils.hasUpperCase(s) ? "" : "i")));
    }
  };

  HistoryCache = {
    size: 20000,
    history: null,
    callbacks: [],
    reset: function() {
      this.history = null;
      this.callbacks = [];
    },
    use: function(callback) {
      if (! this.history) {
        this.fetchHistory(callback);
        return;
      }
      callback(this.history);
    },
    fetchHistory: function(callback) {
      this.callbacks.push(callback);
      if (this.callbacks.length > 1) {
        return;
      }
      var _this = this;
      chrome.history.search({
        text: "",
        maxResults: this.size
      }, function(history) {
        history.sort(function(a, b) { return a.url.localeCompare(b.url); });
        Decoder.decodeList(history);
        _this.history = history;
        chrome.history.onVisited.addListener(_this.onPageVisited.bind(_this));
        chrome.history.onVisitRemoved.addListener(_this.onVisitRemoved.bind(_this));
        for (var i = 0, len = _this.callbacks.length, callback; i < len; ++i) {
          callback = _this.callbacks[i];
          callback(_this.history);
        }
        _this.callbacks = [];
      });
    },
    onPageVisited: function(newPage) {
      var i = this.binarySearch(newPage.url, this.history);
      if (i >= 0) {
        var old = this.history[i];
        if (old.text !== old.url) {
          newPage.text = old.text;
        } else {
          Decoder.decodeList([newPage]);
        }
        this.history[i] = newPage;
      } else {
        this.history.splice(-1 - i, 0, newPage);
      }
    },
    onVisitRemoved: function(toRemove) {
      if (toRemove.allHistory) {
        this.reset();
        return;
      }
      var bs = this.binarySearch, h = this.history;
      toRemove.urls.forEach(function(url) {
        var i = bs(url, h);
        if (i >= 0) {
          h.splice(i, 1);
        }
      });
    },
    binarySearch: function(u, a) {
      var e, h = a.length - 1, l = 0, m = 0;
      while (l <= h) {
        m = Math.floor((l + h) / 2);
        e = a[m].url.localeCompare(u);
        if (e > 0) { h = m - 1; }
        else if (e < 0) { l = m + 1; }
        else { return m; }
      }
      e = a[m].url;
      if (e < u) { return -2 - m; }
      return -1 - m;
    }
  };

  var Decoder = {
    decodeURL: function(a) {
      try {
        return decodeURIComponent(a);
      } catch (e) {
        return Decoder.data[a] || a;
      }
    },
    decodeList: function(a) {
      var j, i = -1, l = a.length;
      for (; ; ) {
        try {
          while (++i < l) {
            j = a[i];
            j.text = decodeURIComponent(j.url);
          }
          break;
        } catch (e) {
          if (Decoder.data[j.url]) {
            j.text = Decoder.data[j.url];
          } else {
            j.text = j.url;
            Decoder.push(j);
          }
        }
      }
    },
    todos: [],
    data: {},
    timer: 0,
    working: -1,
    interval: 25,
    push: function(a) {
      this.todos.push(a);
      if (! this.timer) {
        this.timer = setInterval(this.worker, this.interval);
      }
    },
    worker: function() {
      var _this = Decoder;
      if (_this.working === -1) {
        _this.init();
        _this.working = 0;
      }
      if (! _this.todos.length) {
        clearInterval(_this.timer);
      } else if (_this.working === 0) {
        _this.working = 1;
        _this._link.href = "data:text/css;charset=gb2312,%23" + _this._id + "%7Bfont-family%3A%22" + _this.todos[0].url + "%22%7D";
      } else if (_this.working === 1) {
        _this.working = 2;
        var text = window.getComputedStyle(_this._div).fontFamily
          , entry = _this.todos.shift();
        _this.data[entry.url] = entry.text = text = text.substring(1, text.length - 1);
        console.log(entry.url);
        console.log(text);
        _this.working = 0;
      }
    },
    init: function() {
      var id = this._id = '_decode' + Utils.createUniqueId(),
          link = this._link = document.createElement('link'),
          div = this._div = document.createElement('div');
      link.rel = 'stylesheet';
      link.type = 'text/css';
      div.id = id;
      div.style.display = 'none';
      document.documentElement.appendChild(link);
      document.documentElement.appendChild(div);
    }
  };
  
  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Suggestion = Suggestion;

  root.BookmarkCompleter = BookmarkCompleter;

  root.MultiCompleter = MultiCompleter;

  root.HistoryCompleter = HistoryCompleter;

  root.DomainCompleter = DomainCompleter;

  root.TabCompleter = TabCompleter;

  root.SearchEngineCompleter = SearchEngineCompleter;

  root.HistoryCache = HistoryCache;

  root.RankingUtils = RankingUtils;

  root.Decoder = Decoder;
  
}).call(this);
