"use strict";
// Generated by CoffeeScript 1.8.0
(typeof exports !== "undefined" && exports !== null ? exports : window).Exclusions = {
  _cache: {},
  _emptyStringRegex: /^$/,
  _sharpRegex: /\*/g,
  getRegex: function(pattern) {
    var regexp;
    if (regexp = this._cache[pattern]) {
      return regexp;
    }
    try {
      return this._cache[pattern] = new RegExp("^" + pattern.replace(this._sharpRegex, ".*") + "$");
    } catch (e) {
      return this._cache[pattern] = this._emptyStringRegex;
    }
  },
  rules: Settings.get("exclusionRules"),
  getRule: function(url, rules) {
    var rule, _i, _len, _ref, matchedPatterns = [], matchedKeys = [];
    if (rules == null) {
      rules = this.rules;
    }
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      if (rule.pattern && 0 <= url.search(this.getRegex(rule.pattern))) {
        if (!rule.passKeys) {
          return rule;
        }
        matchedPatterns.push(rule.pattern);
        matchedKeys.push(rule.passKeys);
      }
    }
    return (matchedKeys.length === 0) ? null : {
      pattern: matchedPatterns.join(" | "),
      passKeys: Utils.distinctCharacters(matchedKeys.join(""))
    };
  },
  setRules: function(rules) {
    rules = rules.filter(function(rule) {
      return rule && rule.pattern;
    });
    if (JSON.stringify(rules) === JSON.stringify(Settings.defaults.exclusionRules)) {
      rules = Settings.defaults.exclusionRules;
    }
    this.rules = rules;
    Settings.set("exclusionRules", this.rules);
  },
  postUpdateHook: function(rules) {
    this.rules = rules;
  }
};

if (!Settings.has("exclusionRules") && Settings.has("excludedUrls")) {
  (typeof exports !== "undefined" && exports !== null ? exports : window).Exclusions.setRules((function(lines) {
    var line, parse, _i, _len, _ref, results;
    _ref = lines.trim().split("\n");
    results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i].trim();
      if (line.length && line.indexOf("#") !== 0 && line.indexOf('"') !== 0) {
        parse = line.split(/\s+/);
        results.push({
          pattern: parse[0],
          passKeys: parse.slice(1).join("")
        });
      }
    }
    return results;
  })(Settings.get("excludedUrls")));
  if (!Settings.has("excludedUrlsBackup")) {
    Settings.set("excludedUrlsBackup", Settings.get("excludedUrls"));
  }
  Settings.clear("excludedUrls");
}
