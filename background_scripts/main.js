// Generated by CoffeeScript 1.8.0
(function() {
  var BackgroundCommands, checkKeyQueue, completers, completionSources, copyToClipboard, currentVersion
    , fetchFileContents, filterCompleter, frameIdsForTab, generateCompletionKeys
    , getActualKeyStrokeLength, getCompletionKeysRequest, getCurrentTabUrl
    , getCurrentTimeInSeconds, handleFrameFocused, handleKeyDown, handleSettings, handleUpdateScrollPosition
    , helpDialogHtmlForCommandGroup, isEnabledForUrl, keyQueue, moveTab, namedKeyRegex
    , openOptionsPageInNewTab, openUrlInCurrentTab, openUrlInIncognito, openUrlInNewTab, restoreSession
    , populateKeyCommands, portHandlers, refreshCompleter, registerFrame
    , removeTabsRelative, repeatFunction, root, saveHelpDialogSettings, selectSpecificTab, selectTab
    , selectionChangedHandlers, sendRequestHandlers, sendRequestToAllTabs, setBrowserActionIcon
    , shouldShowUpgradeMessage, singleKeyCommands, splitKeyIntoFirstAndSecond, splitKeyQueue, tabInfoMap
    , tabLoadedHandlers, tabQueue, unregisterFrame, updateActiveState, updateOpenTabs
    , updatePositionsAndWindowsForAllTabsInWindow, updateScrollPosition, upgradeNotificationClosed
    , validFirstKeys, hasActionIcon, onDomReady;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  hasActionIcon = ! ! (chrome.browserAction && chrome.browserAction.setIcon);

  currentVersion = Utils.getCurrentVersion();

  root.tabQueue = tabQueue = {};

  tabInfoMap = {};

  keyQueue = "";

  validFirstKeys = {};

  singleKeyCommands = [];

  frameIdsForTab = {};

  namedKeyRegex = /^(<(?:[amc]-.|(?:[amc]-)?[a-z0-9]{2,5})>)(.*)$/;

  selectionChangedHandlers = [];

  tabLoadedHandlers = {};

  completionSources = {
    bookmarks: new BookmarkCompleter(),
    history: new HistoryCompleter(),
    domains: new DomainCompleter(),
    tabs: new TabCompleter(),
    seachEngines: new SearchEngineCompleter()
  };

  completers = {
    omni: new MultiCompleter([completionSources.seachEngines, completionSources.bookmarks, completionSources.history, completionSources.domains]),
    bookmarks: new MultiCompleter([completionSources.bookmarks]),
    history: new MultiCompleter([completionSources.history]),
    tabs: new MultiCompleter([completionSources.tabs])
  };

  chrome.runtime.onConnect.addListener(function(port) {
    var handler = portHandlers[port.name];
    if (handler) {
      port.onMessage.addListener(handler);
    }
  });

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    var handler = sendRequestHandlers[request.handler];
    if (handler) {
      // try {
      handler = handler(request, sender);
      sendResponse(handler);
      /*
      } catch(e) {
        console.warn(request, sender);
        console.log(handler);
        console.log("%c" + e.stack, "color: red;");
      }
      //*/
    }
    return false;
  });

  getCurrentTabUrl = function(request, sender) {
    return sender.tab.url;
  };

  root.isEnabledForUrl = isEnabledForUrl = function(request) {
    var rule;
    rule = Exclusions.getRule(request.url);
    return {
      rule: rule,
      isEnabledForUrl: !rule || rule.passKeys,
      passKeys: (rule != null ? rule.passKeys : void 0) || ""
    };
  };

  root.addExclusionRule = function(pattern, passKeys) {
    if (pattern = pattern.trim()) {
      Exclusions.updateOrAdd({
        pattern: pattern,
        passKeys: passKeys
      });
      hasActionIcon && chrome.tabs.query({
        windowId: chrome.windows.WINDOW_ID_CURRENT,
        active: true
      }, function(tabs) {
        updateActiveState(tabs[0].id);
      });
    }
  };

  root.removeExclusionRule = function(pattern) {
    if (pattern = pattern.trim()) {
      Exclusions.remove(pattern);
      hasActionIcon && chrome.tabs.query({
        windowId: chrome.windows.WINDOW_ID_CURRENT,
        active: true
      }, function(tabs) {
        updateActiveState(tabs[0].id);
      });
    }
  };

  saveHelpDialogSettings = function(request) {
    Settings.set("helpDialog_showAdvancedCommands", request.showAdvancedCommands);
  };

  root.helpDialogHtml = function(showUnboundCommands, showCommandNames, customTitle) {
    var command, commandsToKey, dialogHtml, group, key;
    commandsToKey = {};
    for (key in Commands.keyToCommandRegistry) {
      command = Commands.keyToCommandRegistry[key].command;
      commandsToKey[command] = (commandsToKey[command] || []).concat(key);
    }
    dialogHtml = fetchFileContents("pages/help_dialog.html");
    for (group in Commands.commandGroups) {
      dialogHtml = dialogHtml.replace("{{" + group + "}}", helpDialogHtmlForCommandGroup(group, commandsToKey, Commands.availableCommands, showUnboundCommands, showCommandNames));
    }
    dialogHtml = dialogHtml.replace("{{version}}", currentVersion);
    dialogHtml = dialogHtml.replace("{{title}}", customTitle || "Help");
    return dialogHtml;
  };

  helpDialogHtmlForCommandGroup = function(group, commandsToKey, availableCommands, showUnboundCommands, showCommandNames) {
    var bindings, command, html, isAdvanced, _i, _len, _ref;
    html = [];
    _ref = Commands.commandGroups[group];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      command = _ref[_i];
      bindings = (commandsToKey[command] || [""]).join(", ");
      if (showUnboundCommands || commandsToKey[command]) {
        isAdvanced = Commands.advancedCommands.indexOf(command) >= 0;
        html.push("<tr class='vimiumReset vimiumHelpTr" + (isAdvanced ? " vimiumHelpAdvanced'>" : "'>")
          , "<td class='vimiumReset vimiumHelpTd vimiumHelpShortKey'><span class='vimiumReset vimiumHelpShortKey2'>", Utils.escapeHtml(bindings)
          , "</span></td>\n<td class='vimiumReset vimiumHelpTd'>:</td>\n<td class='vimiumReset vimiumHelpTd vimiumHelpCommandInfo'>"
          , Utils.escapeHtml(availableCommands[command].description));
        if (showCommandNames) {
          html.push("<span class='vimiumReset vimiumHelpCommandName'>(" + command + ")</span>");
        }
        html.push("</td>\n</tr>");
      }
    }
    return html.join("\n");
  };

  fetchFileContents = function(extensionFileName) {
    var req = new XMLHttpRequest();
    req.open("GET", chrome.runtime.getURL(extensionFileName), false);
    req.send();
    return req.responseText;
  };

  getCompletionKeysRequest = function(request, keysToCheck) {
    if (keysToCheck == null) {
      keysToCheck = "";
    }
    return {
      name: "refreshCompletionKeys",
      completionKeys: generateCompletionKeys(keysToCheck),
      validFirstKeys: validFirstKeys
    };
  };

  openUrlInCurrentTab = function(request) {
    chrome.tabs.getSelected(null, function(tab) {
      chrome.tabs.update(tab.id, {
        url: Utils.convertToUrl(request.url)
      });
    });
  };

  openUrlInNewTab = function(request) {
    chrome.tabs.getSelected(null, function(tab) {
      chrome.tabs.create({
        url: Utils.convertToUrl(request.url),
        index: tab.index + 1,
        selected: true
      });
    });
  };
  
  restoreSession = function(request) {
    BackgroundCommands.restoreTab(function() {}, null, request.sessionId);
  }

  openUrlInIncognito = function(request) {
    chrome.windows.create({
      url: Utils.convertToUrl(request.url),
      incognito: true
    });
  };

  upgradeNotificationClosed = function(request) {
    Settings.set("previousVersion", currentVersion);
    sendRequestToAllTabs({
      name: "hideUpgradeNotification"
    });
  };

  copyToClipboard = function(request) {
    Clipboard.copy(request.data);
  };

  selectSpecificTab = function(request) {
    chrome.tabs.get(request.sessionId, function(tab) {
      chrome.windows.update(tab.windowId, {
        focused: true
      });
      chrome.tabs.update(request.sessionId, {
        selected: true
      });
    });
  };

  handleSettings = function(args, port) {
    if (args.operation === "get") {
      port.postMessage({
        key: args.key,
        value: Settings.get(args.key)
      });
    } else if (args.operation === "set") {
      Settings.set(args.key, args.value);
    }
  };

  refreshCompleter = function(request) {
    completers[request.name].refresh();
  };

  filterCompleter = function(args, port) {
    completers[args.name].filter(args.query ? args.query.trim().split(/\s+/) : [], function(results) {
      port.postMessage({
        id: args.id,
        results: results
      });
    });
  };

  getCurrentTimeInSeconds = function() {
    return Math.floor((new Date()).getTime() / 1000);
  };

  chrome.tabs.onSelectionChanged.addListener(function(tabId, selectionInfo) {
    if (selectionChangedHandlers.length > 0) {
      var callback = selectionChangedHandlers.pop();
      if (callback) {
        callback();
      }
    }
  });

  repeatFunction = function(func, totalCount, currentCount, frameId) {
    if (currentCount < totalCount) {
      func(function() {
        repeatFunction(func, totalCount, currentCount + 1, frameId);
      }, frameId);
    }
  };

  moveTab = function(callback, direction) {
    chrome.tabs.getSelected(null, function(tab) {
      chrome.tabs.move(tab.id, {
        index: Math.max(0, tab.index + direction)
      }, callback);
    });
  };

  BackgroundCommands = {
    createTab: function(callback) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.windows.get(tab.windowId, function(window) {
          var url = Settings.get("newTabUrl");
          if (! window.incognito || /^https?:/i.test(url) || url.toLowerCase() === Settings.defaults.newTabUrl) {
            chrome.tabs.create({
              windowId: window.id,
              index: tab.index + 1,
              url: url
            }, callback);
            return;
          }
          // other urls will be disabled if incognito
          chrome.tabs.getAllInWindow(tab.windowId, function(allTabs) {
            var urlLower = url.toLowerCase().split('#', 1)[0];
            if (urlLower.indexOf("://") < 0) {
              urlLower = chrome.runtime.getURL(urlLower);
            }
            allTabs = allTabs.filter(function(tab1) {
              var url = tab1.url.toLowerCase(), end = url.indexOf("#");
              return ((end < 0) ? url : url.substring(0, end)) === urlLower;
            });
            if (allTabs.length > 0) {
              urlLower = allTabs.filter(function(tab1) {
                return tab1.index >= tab.index;
              });
              tab = (urlLower.length > 0) ? urlLower[0] : allTabs[allTabs.length - 1];
              chrome.tabs.duplicate(tab.id, callback);
              return;
            }
            chrome.tabs.create({
              selected: false,
              url: url
            }, function(newTab) {
              chrome.windows.create({
                left: 0,
                top: 0,
                width: 50,
                height: 50,
                incognito: true,
                tabId: newTab.id
              }, function() {
                chrome.tabs.move(newTab.id, {
                  index: tab.index + 1,
                  windowId: window.id
                }, function() {
                  chrome.tabs.update(newTab.id, {
                    selected: true 
                  }, callback);
                });
              });
            });
          });
        });
      });
    },
    duplicateTab: function(callback) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.tabs.duplicate(tab.id, callback);
      });
    },
    moveTabToNewWindow: function(callback) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.windows.get(tab.windowId, function(window) {
          chrome.windows.create({
            tabId: tab.id,
            incognito: window.incognito
          }, callback);
        });
      });
    },
    moveTabToIncognito: function(callback) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.windows.get(tab.windowId, function(window) {
          if (window.incognito) {
            callback && callback();
            return;
          }
          var options = {
            type: "normal",
            incognito: true
          };
          window = tab.url.toLowerCase();
          if (window.startsWith("chrome") && window !== Settings.defaults.newTabUrl) {
            options.tabId = tab.id;
          } else {
            options.url = tab.url;
            chrome.tabs.remove(tab.id);
          }
          chrome.windows.create(options, callback);
        });
      });
    },
    nextTab: function(callback) {
      selectTab(callback, "next");
    },
    previousTab: function(callback) {
      selectTab(callback, "previous");
    },
    firstTab: function(callback) {
      selectTab(callback, "first");
    },
    lastTab: function(callback) {
      selectTab(callback, "last");
    },
    removeTab: function(callback) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.tabs.getAllInWindow(tab.windowId, function(curTabs) {
          if (! curTabs || curTabs.length !== 1) {
            selectionChangedHandlers.push(callback);
            chrome.tabs.remove(tab.id);
            return;
          }
          chrome.windows.getAll(function(windows) {
            var url = Settings.get("newTabUrl"), toCreate;
            windows = windows.filter(function(wnd) {
              return wnd.type === "normal";
            });
            if (windows.length <= 1) {
              toCreate = {};
              if (windows.length === 1 && windows[0].incognito && (/^https?:/i.test(url)
                || url.toLowerCase() === Settings.defaults.newTabUrl)) {
                // other urls will be disabled if incognito
                toCreate.windowId = windows[0].id;
              }
            }
            else if (! tab.incognito) {
              windows = windows.filter(function(wnd) {
                return ! wnd.incognito;
              });
              if (windows.length == 1 && windows[0].id === tab.windowId) {
                toCreate = { windowId: windows[0].id };
              }
            }
            selectionChangedHandlers.push(callback);
            chrome.tabs.remove(tab.id);
            if (toCreate) {
              toCreate.url = url;
              chrome.tabs.create(toCreate);
            }
          });
        });
      });
    },
    restoreTab: function(callback, _1, sessionId) {
      if (chrome.sessions) {
        chrome.sessions.restore(sessionId || null, function(restoredSession) {
          if (!chrome.runtime.lastError) {
            callback();
          }
        });
        return;
      }
      chrome.windows.getCurrent(function(window) {
        var tabQueueEntry;
        if (!(tabQueue[window.id] && tabQueue[window.id].length > 0)) {
          callback();
          return;
        }
        if (typeof sessionId === "number" && sessionId >= 0 && sessionId < tabQueue[window.id].length) {
          tabQueueEntry = tabQueue[window.id].splice(sessionId, 1)[0];
        } else {
          tabQueueEntry = tabQueue[window.id].pop();
        }
        if (tabQueue[window.id].length === 0) {
          delete tabQueue[window.id];
        }
        chrome.tabs.create({
          url: tabQueueEntry.url,
          index: tabQueueEntry.positionIndex
        }, function(tab) {
          tabLoadedHandlers[tab.id] = function() {
            chrome.tabs.sendMessage(tab.id, {
              name: "setScrollPosition",
              scrollX: tabQueueEntry.scrollX,
              scrollY: tabQueueEntry.scrollY
            });
          };
          callback();
        });
      });
    },
    openCopiedUrlInCurrentTab: function(request) {
      openUrlInCurrentTab({
        url: Clipboard.paste()
      });
    },
    openCopiedUrlInNewTab: function(request) {
      openUrlInNewTab({
        url: Clipboard.paste()
      });
    },
    togglePinTab: function(request) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.tabs.update(tab.id, {
          pinned: !tab.pinned
        });
      });
    },
    showHelp: function(callback, frameId) {
      chrome.tabs.getSelected(null, function(tab) {
        chrome.tabs.sendMessage(tab.id, {
          name: "toggleHelpDialog",
          dialogHtml: helpDialogHtml(),
          frameId: frameId
        });
      });
    },
    moveTabLeft: function(count) {
      moveTab(null, -count);
    },
    moveTabRight: function(count) {
      moveTab(null, count);
    },
    nextFrame: function(count, frameId) {
      chrome.tabs.getSelected(null, function(tab) {
        var frames = frameIdsForTab[tab.id];
        count = (count + Math.max(0, frameIdsForTab[tab.id].indexOf(frameId))) % frames.length;
        frames = frameIdsForTab[tab.id] = frames.slice(count).concat(frames.slice(0, count));
        chrome.tabs.sendMessage(tab.id, {
          name: "focusFrame",
          frameId: frames[0],
          highlight: true
        });
      });
    },
    closeTabsOnLeft: function() {
      removeTabsRelative("before");
    },
    closeTabsOnRight: function() {
      removeTabsRelative("after");
    },
    closeOtherTabs: function() {
      removeTabsRelative("both");
    }
  };

  removeTabsRelative = function(direction) {
    chrome.tabs.query({
      currentWindow: true
    }, function(tabs) {
      chrome.tabs.query({
        currentWindow: true,
        active: true
      }, function(activeTabs) {
        var activeTabIndex, shouldDelete, tab, toRemove, _i, _len;
        activeTabIndex = activeTabs[0].index;
        shouldDelete = (direction === "before") ? function(index) {
          return index < activeTabIndex;
        } : (direction === "after") ? function(index) {
          return index > activeTabIndex;
        } : (direction === "both") ? function(index) {
          return index !== activeTabIndex;
        } : function() {
          return false;
        };
        toRemove = [];
        for (_i = 0, _len = tabs.length; _i < _len; _i++) {
          tab = tabs[_i];
          if (!tab.pinned && shouldDelete(tab.index)) {
            toRemove.push(tab.id);
          }
        }
        chrome.tabs.remove(toRemove);
      });
    });
  };

  selectTab = function(callback, direction) {
    chrome.tabs.getAllInWindow(null, function(tabs) {
      if (!(tabs.length > 1)) {
        return;
      }
      chrome.tabs.getSelected(null, function(currentTab) {
        var toSelect;
        switch (direction) {
          case "next":
            toSelect = tabs[(currentTab.index + 1 + tabs.length) % tabs.length];
            break;
          case "previous":
            toSelect = tabs[(currentTab.index - 1 + tabs.length) % tabs.length];
            break;
          case "first":
            toSelect = tabs[0];
            break;
          case "last":
            toSelect = tabs[tabs.length - 1];
        }
        selectionChangedHandlers.push(callback);
        chrome.tabs.update(toSelect.id, {
          selected: true
        });
      });
    });
  };

  updateOpenTabs = function(tab) {
    var _ref;
    if ((_ref = tabInfoMap[tab.id]) != null ? _ref.deletor : void 0) {
      clearTimeout(tabInfoMap[tab.id].deletor);
    }
    tabInfoMap[tab.id] = {
      url: tab.url,
      title: tab.title,
      positionIndex: tab.index,
      windowId: tab.windowId,
      scrollX: null,
      scrollY: null,
      deletor: null
    };
    delete frameIdsForTab[tab.id];
  };

  setBrowserActionIcon = function(tabId, path) {
    hasActionIcon && chrome.browserAction.setIcon({
      tabId: tabId,
      path: path
    });
  };

  updateActiveState = function(tabId) {
    if (!hasActionIcon) return;
    var enabledIcon = "icons/browser_action_enabled.png",
      disabledIcon = "icons/browser_action_disabled.png",
      partialIcon = "icons/browser_action_partial.png";
    chrome.tabs.get(tabId, function(tab) {
      chrome.tabs.sendMessage(tabId, {
        name: "getActiveState"
      }, function(response) {
        var config, currentPasskeys, enabled, isCurrentlyEnabled, passKeys;
        if (response) {
          isCurrentlyEnabled = response.enabled;
          currentPasskeys = response.passKeys;
          config = isEnabledForUrl({
            url: tab.url
          });
          enabled = config.isEnabledForUrl;
          passKeys = config.passKeys;
          if (enabled && passKeys) {
            setBrowserActionIcon(tabId, partialIcon);
          } else if (enabled) {
            setBrowserActionIcon(tabId, enabledIcon);
          } else {
            setBrowserActionIcon(tabId, disabledIcon);
          }
          if (isCurrentlyEnabled !== enabled || currentPasskeys !== passKeys) {
            chrome.tabs.sendMessage(tabId, {
              name: "setState",
              enabled: enabled,
              passKeys: passKeys
            });
          }
        } else {
          setBrowserActionIcon(tabId, disabledIcon);
        }
      });
    });
  };

  handleUpdateScrollPosition = function(request, sender) {
    updateScrollPosition(sender.tab, request.scrollX, request.scrollY);
  };

  updateScrollPosition = function(tab, scrollX, scrollY) {
    tabInfoMap[tab.id].scrollX = scrollX;
    tabInfoMap[tab.id].scrollY = scrollY;
  };

  chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
    if (changeInfo.status !== "loading") {
      return;
    }
    chrome.tabs.insertCSS(tabId, {
      allFrames: true,
      code: Settings.get("userDefinedLinkHintCss"),
      runAt: "document_start"
    }, function() {
      return chrome.runtime.lastError;
    });
    if (changeInfo.url != null) {
      updateOpenTabs(tab);
    }
    hasActionIcon && updateActiveState(tabId);
  });

  chrome.tabs.onAttached.addListener(function(tabId, attachedInfo) {
    if (tabInfoMap[tabId]) {
      updatePositionsAndWindowsForAllTabsInWindow(tabInfoMap[tabId].windowId);
    }
    updatePositionsAndWindowsForAllTabsInWindow(attachedInfo.newWindowId);
  });

  chrome.tabs.onMoved.addListener(function(tabId, moveInfo) {
    updatePositionsAndWindowsForAllTabsInWindow(moveInfo.windowId);
  });

  chrome.tabs.onRemoved.addListener(function(tabId) {
    var i, openTabInfo;
    openTabInfo = tabInfoMap[tabId];
    if (!openTabInfo || !openTabInfo.windowId) {
      return true;
    }
    updatePositionsAndWindowsForAllTabsInWindow(openTabInfo.windowId);
    if (!chrome.sessions) {
      if (/^(chrome|view-source:)[^:]*:\/\/.*/.test(openTabInfo.url)) {
        for (i in tabQueue[openTabInfo.windowId]) {
          if (tabQueue[openTabInfo.windowId][i].positionIndex > openTabInfo.positionIndex) {
            tabQueue[openTabInfo.windowId][i].positionIndex--;
          }
        }
        return;
      }
      openTabInfo.lastVisitTime = new Date().getTime();
      if (tabQueue[openTabInfo.windowId]) {
        tabQueue[openTabInfo.windowId].push(openTabInfo);
      } else {
        tabQueue[openTabInfo.windowId] = [openTabInfo];
      }
    }
    tabInfoMap.deletor = function() {
      delete tabInfoMap[tabId];
    };
    setTimeout(tabInfoMap.deletor, 1000);
    delete frameIdsForTab[tabId];
  });

  hasActionIcon && chrome.tabs.onActiveChanged.addListener(function(tabId, selectInfo) {
    updateActiveState(tabId);
  });

  if (!chrome.sessions) {
    chrome.windows.onRemoved.addListener(function(windowId) {
      delete tabQueue[windowId];
    });
  }

  updatePositionsAndWindowsForAllTabsInWindow = function(windowId) {
    chrome.tabs.getAllInWindow(windowId, function(tabs) {
      if (!tabs) return;
      var openTabInfo, tab, _i, _len;
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        openTabInfo = tabInfoMap[tab.id];
        if (openTabInfo) {
          openTabInfo.positionIndex = tab.index;
          openTabInfo.windowId = tab.windowId;
        }
      }
    });
  };

  splitKeyIntoFirstAndSecond = function(key) {
    return (key.search(namedKeyRegex) === 0) ? {
      first: RegExp.$1,
      second: RegExp.$2
    } : {
      first: key[0],
      second: key.slice(1)
    };
  };

  getActualKeyStrokeLength = function(key) {
    if (key.search(namedKeyRegex) === 0) {
      return 1 + getActualKeyStrokeLength(RegExp.$2);
    } else {
      return key.length;
    }
  };

  populateKeyCommands = function() {
    var key, len;
    for (key in Commands.keyToCommandRegistry) {
      len = getActualKeyStrokeLength(key);
      if (len === 1) {
        singleKeyCommands.push(key);
      }
      else if (len === 2) {
        validFirstKeys[splitKeyIntoFirstAndSecond(key).first] = true;
      }
    }
  };

  root.refreshCompletionKeysAfterMappingSave = function() {
    validFirstKeys = {};
    singleKeyCommands = [];
    populateKeyCommands();
    sendRequestToAllTabs(getCompletionKeysRequest());
  };

  generateCompletionKeys = function(keysToCheck) {
    var command, completionKeys, count, key, splitHash, splitKey;
    splitHash = splitKeyQueue(keysToCheck || keyQueue);
    command = splitHash.command;
    count = splitHash.count;
    completionKeys = singleKeyCommands.slice(0);
    if (getActualKeyStrokeLength(command) === 1) {
      for (key in Commands.keyToCommandRegistry) {
        splitKey = splitKeyIntoFirstAndSecond(key);
        if (splitKey.first === command) {
          completionKeys.push(splitKey.second);
        }
      }
    }
    return completionKeys;
  };

  splitKeyQueue = function(queue) {
    var match = /([1-9][0-9]*)?(.*)/.exec(queue);
    return {
      count: parseInt(match[1], 10),
      command: match[2]
    };
  };

  handleKeyDown = function(request, port) {
    var key;
    key = request.keyChar;
    if (key === "<ESC>") {
      // console.log("clearing keyQueue");
      keyQueue = "";
    } else {
      // console.log("checking keyQueue: [", keyQueue + key, "]");
      keyQueue = checkKeyQueue(keyQueue + key, port.sender.tab.id, request.frameId);
      // console.log("new KeyQueue: " + keyQueue);
    }
    /* chrome.tabs.sendMessage(port.sender.tab.id, {
      name: "currentKeyQueue",
      keyQueue: keyQueue
    }); */
  };

  checkKeyQueue = function(keysToCheck, tabId, frameId) {
    var command, count, newKeyQueue, refreshedCompletionKeys, registryEntry, runCommand, splitHash, splitKey;
    refreshedCompletionKeys = false;
    splitHash = splitKeyQueue(keysToCheck);
    command = splitHash.command;
    count = splitHash.count;
    if (command.length === 0) {
      return keysToCheck;
    }
    if (isNaN(count)) {
      count = 1;
    }
    if (Commands.keyToCommandRegistry[command]) {
      registryEntry = Commands.keyToCommandRegistry[command];
      runCommand = true;
      if (registryEntry.noRepeat) {
        count = 1;
      } else if (registryEntry.repeatLimit && count > registryEntry.repeatLimit) {
        runCommand = confirm("You have asked Vimium to perform " + count + " repeats of the command:\n" + Commands.availableCommands[registryEntry.command].description + "\n\nAre you sure you want to continue?");
      }
      if (runCommand) {
        if (registryEntry.isBackgroundCommand) {
          if (registryEntry.passCountToFunction) {
            BackgroundCommands[registryEntry.command](count, frameId);
          } else if (registryEntry.noRepeat) {
            BackgroundCommands[registryEntry.command](frameId);
          } else {
            repeatFunction(BackgroundCommands[registryEntry.command], count, 0, frameId);
          }
        } else {
          chrome.tabs.sendMessage(tabId, {
            name: "executePageCommand",
            command: registryEntry.command,
            frameId: frameId,
            count: count,
            passCountToFunction: registryEntry.passCountToFunction,
            completionKeys: generateCompletionKeys("")
          });
          refreshedCompletionKeys = true;
        }
      }
      newKeyQueue = "";
    } else if (getActualKeyStrokeLength(command) > 1) {
      splitKey = splitKeyIntoFirstAndSecond(command);
      if (Commands.keyToCommandRegistry[splitKey.second]) {
        newKeyQueue = checkKeyQueue(splitKey.second, tabId, frameId);
      } else {
        newKeyQueue = (validFirstKeys[splitKey.second] ? splitKey.second : "");
      }
    } else {
      newKeyQueue = (validFirstKeys[command] ? count.toString() + command : "");
    }
    if (!refreshedCompletionKeys) {
      chrome.tabs.sendMessage(tabId, getCompletionKeysRequest(null, newKeyQueue), null);
    }
    return newKeyQueue;
  };

  sendRequestToAllTabs = function(args) {
    chrome.windows.getAll({
      populate: true
    }, function(windows) {
      var _i, _len, _j, _len1, _ref;
      for (_i = 0, _len = windows.length; _i < _len; _i++) {
        _ref = windows[_i].tabs;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          chrome.tabs.sendMessage(_ref[_j].id, args, null);
        }
      }
    });
  };

  shouldShowUpgradeMessage = function() {
    if (!Settings.get("previousVersion")) {
      Settings.set("previousVersion", currentVersion);
      return false;
    }
    return Utils.compareVersions(currentVersion, Settings.get("previousVersion")) === 1;
  };

  openOptionsPageInNewTab = function() {
    chrome.tabs.getSelected(null, function(tab) {
      chrome.tabs.create({
        url: chrome.runtime.getURL("pages/options.html"),
        index: tab.index + 1
      });
    });
  };

  registerFrame = function(request, sender) {
    var _name = sender.tab.id;
    (frameIdsForTab[_name] || (frameIdsForTab[_name] = [])).push(request.frameId);
  };

  unregisterFrame = function(request, sender) {
    var tabId = sender.tab.id;
    if (frameIdsForTab[tabId] == null) {
      return;
    }
    if (request.tab_is_closing) {
      updateOpenTabs(sender.tab);
      return;
    }
    frameIdsForTab[tabId] = frameIdsForTab[tabId].filter(function(id) {
      return id !== request.frameId;
    });
  };

  handleFrameFocused = function(request, sender) {
    var tabId = sender.tab.id;
    if (frameIdsForTab[tabId] == null) {
      return;
    }
    frameIdsForTab[tabId] = frameIdsForTab[tabId].filter(function(id) {
      return id !== request.frameId;
    }).unshift(request.frameId);
  };
  
  onDomReady = function(request, sender) {
    var senderTabId = sender.tab ? sender.tab.id : null;
    if (senderTabId == null) {
      return;
    }
    if (tabLoadedHandlers[senderTabId]) {
      toCall = tabLoadedHandlers[senderTabId];
      delete tabLoadedHandlers[senderTabId];
      toCall.call();
    }
    if (shouldShowUpgradeMessage()) {
      chrome.tabs.sendMessage(senderTabId, {
        name: "showUpgradeNotification",
        version: currentVersion
      });
    }
  }

  portHandlers = {
    keyDown: handleKeyDown,
    settings: handleSettings,
    filterCompleter: filterCompleter
  };

  sendRequestHandlers = {
    domReady: onDomReady,
    getCompletionKeys: getCompletionKeysRequest,
    getCurrentTabUrl: getCurrentTabUrl,
    openUrlInNewTab: openUrlInNewTab,
    restoreSession: restoreSession,
    openUrlInIncognito: openUrlInIncognito,
    openUrlInCurrentTab: openUrlInCurrentTab,
    openOptionsPageInNewTab: openOptionsPageInNewTab,
    registerFrame: registerFrame,
    unregisterFrame: unregisterFrame,
    frameFocused: handleFrameFocused,
    upgradeNotificationClosed: upgradeNotificationClosed,
    updateScrollPosition: handleUpdateScrollPosition,
    copyToClipboard: copyToClipboard,
    isEnabledForUrl: isEnabledForUrl,
    saveHelpDialogSettings: saveHelpDialogSettings,
    selectSpecificTab: selectSpecificTab,
    refreshCompleter: refreshCompleter,
    createMark: Marks.create,
    gotoMark: Marks.goTo
  };

  window.runTests = function() {
    open(chrome.runtime.getURL('tests/dom_tests/dom_tests.html'));
  };

  Commands.clearKeyMappingsAndSetDefaults();

  if (Settings.has("keyMappings")) {
    Commands.parseCustomKeyMappings(Settings.get("keyMappings"));
  }

  populateKeyCommands();

  if (shouldShowUpgradeMessage()) {
    sendRequestToAllTabs({
      name: "showUpgradeNotification",
      version: currentVersion
    });
  }

  chrome.windows.getAll({
    populate: true
  }, function(windows) {
    var createScrollPositionHandler, tab, _i, _len, _j, _len1, _ref;
    createScrollPositionHandler = function(tab) {
      return function(response) {
        if (response != null) {
          return updateScrollPosition(tab, response.scrollX, response.scrollY);
        }
      };
    };
    for (_i = 0, _len = windows.length; _i < _len; _i++) {
      _ref = windows[_i].tabs;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        tab = _ref[_j];
        updateOpenTabs(tab);
        chrome.tabs.sendMessage(tab.id, {
          name: "getScrollPosition"
        }, createScrollPositionHandler(tab));
      }
    }
  });

  // Sync.init();

}).call(this);
