"use strict";
// Generated by CoffeeScript 1.8.0
(typeof exports !== "undefined" && exports !== null ? exports : window).Settings = {
  _buffer: {},
  get: function(key) {
    if (! (key in this._buffer)) {
      return this._buffer[key] = (key in localStorage) ? JSON.parse(localStorage[key]) : this.defaults[key];
    }
    return this._buffer[key];
  },
  set: function(key, value) {
    var ref = this.defaults[key];
    if (value === ref || (key in this.forceBoolean && value !== this.forceBoolean[key])) {
      this._buffer[key] = ref;
      if (key in localStorage) {
        delete localStorage[key];
      }
      Sync.clear(key);
    } else {
      this._buffer[key] = value;
      localStorage[key] = ref = JSON.stringify(value);
      Sync.set(key, ref);
    }
    if (ref = this.postUpdateHooks[key]) {
      ref.call(this, value, key);
    }
  },
  clear: function(key) {
    this.set(key, this.defaults[key]);
  },
  has: function(key) {
    return key in localStorage;
  },
  postUpdateHooks: {
    keyMappings: function(value) {
      Commands.clearKeyMappingsAndSetDefaults();
      Commands.parseCustomKeyMappings(value);
      refreshCompletionKeysAfterMappingSave();
    },
    searchEngines: function() {
      this.resetSearchEngines();
    },
    searchUrl: function(value) {
      this.parseSearchEngines("\\:" + value);
    },
    exclusionRules: function(value) {
      Exclusions.postUpdateHook(value);
    },
    showActionIcon: function(value) {
      setShouldShowActionIcon(value);
    }
  },
  parseSearchEngines: function(searchEnginesText, map) {
    var a, pairs, key, val, name, obj, _i, _j, _len, _len2 //
      , rEscapeSpace = /\\\s/g, rSpace = /\s/;
    map = map || this._buffer.searchEnginesMap;
    a = searchEnginesText.replace(/\\\n/g, '').split('\n');
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      val = a[_i].trim();
      if (!val || val[0] === '#') continue;
      _j = val.indexOf(":");
      if (_j <= 0 || !(key = val.substring(0, _j).trimRight())) continue;
      val = val.substring(_j + 1).trimLeft();
      if (val.length === 0) continue;
      val = val.replace(rEscapeSpace, "\\s");
      _j = val.search(rSpace);
      if (_j > 0) {
        name = val.substring(_j + 1).trimLeft();
        val = val.substring(0, _j);
      } else {
        name = null;
      }
      obj = {url: val};
      pairs = key.split('|');
      for (_j = 0, _len2 = pairs.length; _j < _len2; _j++) {
        if (!(key = pairs[_j].trim())) continue;
        if (!name) name = key;
        map[key] = obj;
      }
      if (name) {
        obj.name = name;
        obj.$s = val.indexOf("%s") >= 0;
        obj.$S = val.indexOf("%S") >= 0;
      }
    }
  },
  resetSearchEngines: function() {
    this._buffer.searchEnginesMap = {};
    this.parseSearchEngines(this.get("searchEngines"));
    this.postUpdateHooks.searchUrl.call(this, this.get("searchUrl"));
  },
  defaults: {
    UILanguage: null,
    helpDialog_showAdvancedCommands: false,
    showActionIcon: false,
    vimSync: false,
    showOmniRelevancy: false,
    scrollStepSize: 100,
    smoothScroll: true,
    keyMappings: "# Insert your preferred key mappings here.",
    linkHintCharacters: "asdqwerzxcv",
    linkHintNumbers: "1234567890",
    filterLinkHints: false,
    hideHud: false,
    regexFindMode: false,
    findModeRawQuery: "",
    userDefinedCss: "",
    exclusionRules: [
      {
        pattern: "http*://mail.google.com/*",
        passKeys: ""
      }
    ],
    previousPatterns: "prev,previous,back,<,\u2190,\xab,\u226a,<<",
    nextPatterns: "next,more,>,\u2192,\xbb,\u226b,>>",
    searchUrl: "http://www.baidu.com/s?ie=utf-8&wd=%s",
    searchEngines: "w = Wikipedia (en-US):\\\n  http://www.wikipedia.org/w/index.php?search=%s\nba=Baidu|baidu=Baidu:\\\n  www.baidu.com/s?ie=utf-8&wd=%s",
    newTabUrl: "/index.html", // note: if changed, /pages/newtab.html also needs change.
    settingsVersion: Utils.getCurrentVersion()
  },
  // accept only if value === @forceBoolean[key], so that we get boolean options
  forceBoolean: {
    settingsVersion: "++",
    showActionIcon: true,
    vimSync: true
  },
  ChromeInnerNewTab: "chrome-search://local-ntp/local-ntp.html"
};
