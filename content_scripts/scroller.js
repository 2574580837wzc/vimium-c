"use strict";
// Generated by CoffeeScript 1.8.0
(function() {
  var CoreScroller, activatedElement, checkVisibility, doesScroll, findScrollableElement //
    , sortBy0, firstScrollableElement //
    , getDimension, getSign, performScroll, scrollProperties, shouldScroll;

  activatedElement = null;

  getSign = function(val) {
    return val === 0 ? 0 : val < 0 ? -1 : 1;
  };

  scrollProperties = {
    x: {
      axisName: "scrollLeft",
      max: "scrollWidth",
      viewSize: "clientWidth"
    },
    y: {
      axisName: "scrollTop",
      max: "scrollHeight",
      viewSize: "clientHeight"
    }
  };

  getDimension = function(el, direction, name) {
    return (typeof name !== "string") ? name
      : (name !== "viewSize" || el !== document.body) ? el[scrollProperties[direction][name]]
      : (direction === "x") ? window.innerWidth : window.innerHeight;
  };

  performScroll = function(element, direction, amount) {
    var before;
    if (direction === "x") {
      before = element.scrollLeft;
      element.scrollLeft += (element.clientWidth > element.clientHeight * 2)
        ? amount : Math.ceil(amount * 0.6);
      return element.scrollLeft !== before;
    } else {
      before = element.scrollTop;
      element.scrollTop += amount;
      return element.scrollTop !== before;
    }
  };

  shouldScroll = function(element, direction) {
    var computedStyle = window.getComputedStyle(element), _ref;
    if (computedStyle.getPropertyValue("display") === "none") {
    }
    else if (computedStyle.getPropertyValue("overflow-" + direction) === "hidden") {
    }
    else if ((_ref = computedStyle.getPropertyValue("visibility")) === "hidden" || _ref === "collapse") {
    }
    else {
      return true;
    }
    return false;
  };

  doesScroll = function(element, direction, amount, factor) {
    var delta = factor * getDimension(element, direction, amount);
    delta = delta ? getSign(delta) : -1;
    return performScroll(element, direction, delta) && performScroll(element, direction, -delta);
  };

  findScrollableElement = function(element, direction, amount, factor) {
    while (element !== document.body && !(doesScroll(element, direction, amount, factor) && shouldScroll(element, direction))) {
      element = element.parentElement || document.body;
    }
    return element;
  };
  
  sortBy0 = function(a, b) {
    return a[0] - b[0];
  };

  firstScrollableElement = function(element) {
    if (doesScroll(element, "y", 1, 1) || doesScroll(element, "y", -1, 1)) {
      return element;
    }
    var children = [], rect, _ref = element.children, _len = _ref.length;
    while (0 <= --_len) {
      element = _ref[_len];
      if (rect = DomUtils.getVisibleClientRect(element)) {
        children.push([(rect[2] - rect[0]) * (rect[3] - rect[1]), element]);
      }
    }
    if (_len = children.length) {
      children = children.sort(sortBy0);
      while (0 <= --_len) {
        if (element = firstScrollableElement(children[_len][1])) {
          return element;
        }
      }
    }
    return null;
  };

  checkVisibility = function(element) {
    if (DomUtils.isVisibile(element)) {
      return false;
    }
    activatedElement = element;
    return true;
  };

  CoreScroller = {
    isLastEventRepeat: false,
    keyIsDown: false,
    smoothScroll: true,
    time: 0,
    init: function(handlers) {
      handlers.keydown = function(event) {
        this.keyIsDown = true;
        this.isLastEventRepeat = event.repeat;
        return true;
      };
      handlers.keyup = function() {
        this.keyIsDown = false;
        this.time += 1;
        return true;
      };
      handlers._this = this;
      handlerStack.push(handlers);
    },
    wouldNotInitiateScroll: function() {
      return this.smoothScroll && (this.isLastEventRepeat);
    },
    minCalibration: 0.5,
    maxCalibration: 1.6,
    calibrationBoundary: 150,
    activationTime: 0,
    scroll: function(element, direction, amount) {
      if (!amount) {
        return;
      }
      if (!this.smoothScroll) {
        performScroll(element, direction, amount);
        checkVisibility(element);
        return;
      }
      if (this.isLastEventRepeat) {
        return;
      }
      this.activationTime = ++this.time;
      this.reset(amount, direction, element);
      requestAnimationFrame(this.Animate);
    },
    KeyIsStillDown: function() {
      return this.time === this.activationTime && this.keyIsDown;
    },
    Animate: null,
    reset: null
  };

  CoreScroller.Animate = (function () {
    var amount = 0, calibration = 1.0, direction = "", duration = 0, element = null, //
    sign = 0, timestamp = -1, totalDelta = 0, totalElapsed = 0.0, //
    animate = function(new_timestamp) {
      var int1 = timestamp, elapsed, _this = CoreScroller;
      elapsed = (int1 !== -1) ? (new_timestamp - int1) : 0;
      if (elapsed === 0) {
        requestAnimationFrame(animate);
      } else {
        totalElapsed += elapsed;
      }
      timestamp = new_timestamp;
      if (_this.KeyIsStillDown()) {
        int1 = calibration;
        if (75 <= totalElapsed && (_this.minCalibration <= int1 && int1 <= _this.maxCalibration)) {
          int1 = _this.calibrationBoundary / amount / int1;
          calibration *= (int1 > 1.05) ? 1.05 : (int1 < 0.95) ? 0.95 : 1.0;
        }
        int1 = Math.ceil(amount * (elapsed / duration) * calibration);
      } else {
        int1 = Math.ceil(amount * (elapsed / duration) * calibration);
        int1 = Math.max(0, Math.min(int1, amount - totalDelta));
      }
      if (int1 && performScroll(element, direction, sign * int1)) {
        totalDelta += int1;
        requestAnimationFrame(animate);
      } else {
        checkVisibility(element);
        if (elapsed !== 0) {
          element = null;
        }
      }
    };
    CoreScroller.reset = function(new_amount, new_dire, new_el) {
      amount = Math.abs(new_amount), calibration = 1.0, direction = new_dire;
      duration = Math.max(100, 20 * Math.log(amount)), element = new_el;
      sign = getSign(new_amount), timestamp = -1, totalDelta = 0, totalElapsed = 0.0;
    };
    return animate;
  })();

  window.Scroller = {
    initPre: function() {
      CoreScroller.init({
        DOMActivate: function(event) {
          activatedElement = event.target;
          return true;
        }
      });
    },
    init: function() {
      CoreScroller.smoothScroll = settings.values.smoothScroll ? true : false;
    },
    getActivatedElement: function() {
      return activatedElement;
    },
    scrollBy: function(direction, amount, factor) {
      var element, elementAmount;
      if (factor == null) {
        factor = 1;
      }
      if (!document.body && amount instanceof Number) {
        if (direction === "x") {
          window.scrollBy(amount, 0);
        } else {
          window.scrollBy(0, amount);
        }
        return;
      }
      if (activatedElement) {
      } else if (activatedElement = document.body && firstScrollableElement(document.body) || document.body) {
      } else {
        return;
      }
      if (!CoreScroller.wouldNotInitiateScroll()) {
        element = findScrollableElement(activatedElement, direction, amount, factor);
        elementAmount = factor * getDimension(element, direction, amount);
        CoreScroller.scroll(element, direction, elementAmount);
      }
    },
    scrollTo: function(direction, pos) {
      var amount, element;
      if (activatedElement) {
      } else if (activatedElement = document.body && firstScrollableElement(document.body) || document.body) {
      } else {
        return;
      }
      element = findScrollableElement(activatedElement, direction, pos, 1);
      amount = getDimension(element, direction, pos) - element[scrollProperties[direction].axisName];
      CoreScroller.scroll(element, direction, amount);
    }
  };

})();
