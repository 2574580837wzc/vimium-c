"use strict";
// Generated by CoffeeScript 1.8.0
(function() {
  var CoreScroller, activatedElement, checkVisibility, doesScroll, findScrollableElement //
    , sortBy0, firstScrollableElement //
    , getDimension, getSign, performScroll, scrollProperties, shouldScroll;

  activatedElement = null;

  getSign = function(val) {
    return val === 0 ? 0 : val < 0 ? -1 : 1;
  };

  scrollProperties = {
    x: {
      axisName: 'scrollLeft',
      max: 'scrollWidth',
      viewSize: 'clientWidth'
    },
    y: {
      axisName: 'scrollTop',
      max: 'scrollHeight',
      viewSize: 'clientHeight'
    }
  };

  getDimension = function(el, direction, name) {
    return !Utils.isString(name) ? name
      : (name !== 'viewSize' || el !== document.body) ? el[scrollProperties[direction][name]]
      : (direction === 'x') ? window.innerWidth : window.innerHeight;
  };

  performScroll = function(element, direction, amount) {
    var before;
    if (direction === 'x') {
      before = element.scrollLeft;
      element.scrollLeft += amount;
      return element.scrollLeft !== before;
    } else {
      before = element.scrollTop;
      element.scrollTop += amount;
      return element.scrollTop !== before;
    }
  };

  shouldScroll = function(element, direction) {
    var computedStyle = window.getComputedStyle(element), _ref;
    if (computedStyle.getPropertyValue("display") === "none") {
    }
    else if (computedStyle.getPropertyValue("overflow-" + direction) === "hidden") {
    }
    else if ((_ref = computedStyle.getPropertyValue("visibility")) === "hidden" || _ref === "collapse") {
    }
    else {
      return true;
    }
    return false;
  };

  doesScroll = function(element, direction, amount, factor) {
    var delta = factor * getDimension(element, direction, amount);
    delta = delta ? getSign(delta) : -1;
    return performScroll(element, direction, delta) && performScroll(element, direction, -delta);
  };

  findScrollableElement = function(element, direction, amount, factor) {
    while (element !== document.body && !(doesScroll(element, direction, amount, factor) && shouldScroll(element, direction))) {
      element = element.parentElement || document.body;
    }
    return element;
  };
  
  sortBy0 = function(a, b) {
    return a[0] - b[0];
  };

  firstScrollableElement = function(element) {
    if (doesScroll(element, "y", 1, 1) || doesScroll(element, "y", -1, 1)) {
      return element;
    }
    var children = [], rect, _ref = element.children, _len = _ref.length;
    while (0 <= --_len) {
      element = _ref[_len];
      if (rect = DomUtils.getVisibleClientRect(element)) {
        children.push([rect.width * rect.height, element]);
      }
    }
    if (_len = children.length) {
      children = children.sort(sortBy0);
      while (0 <= --_len) {
        if (element = firstScrollableElement(children[_len][1])) {
          return element;
        }
      }
    }
    return null;
  };

  checkVisibility = function(element) {
    var rect = activatedElement.getBoundingClientRect();
    if (rect.bottom < 0 || rect.top > window.innerHeight || rect.right < 0 || rect.left > window.innerWidth) {
      activatedElement = element;
      return true;
    }
    return false;
  };

  CoreScroller = {
    smoothScroll: true,
    time: 0,
    isLastEventRepeat: false,
    keyIsDown: false,
    init: function() {
      handlerStack.push({
        keydown: function(event) {
          CoreScroller.keyIsDown = true;
          CoreScroller.isLastEventRepeat = event.repeat;
          return true;
        },
        keyup: function() {
          CoreScroller.keyIsDown = false;
          CoreScroller.time += 1;
          return true;
        }
      });
    },
    wouldNotInitiateScroll: function() {
      return this.smoothScroll && (this.isLastEventRepeat);
    },
    minCalibration: 0.5,
    maxCalibration: 1.6,
    calibrationBoundary: 150,
    scroll: function(element, direction, amount) {
      var activationTime, animate, calibration, duration, myKeyIsStillDown, previousTimestamp, sign, totalDelta, totalElapsed, _ref, _this = this;
      if (!amount) {
        return;
      }
      if (!this.smoothScroll) {
        performScroll(element, direction, amount);
        checkVisibility(element);
        return;
      }
      if (this.isLastEventRepeat) {
        return;
      }
      activationTime = ++this.time;
      myKeyIsStillDown = function() {
        return _this.time === activationTime && _this.keyIsDown;
      };
      sign = getSign(amount);
      amount = Math.abs(amount);
      duration = Math.max(100, 20 * Math.log(amount));
      totalDelta = 0;
      totalElapsed = 0.0;
      calibration = 1.0;
      previousTimestamp = -1;
      animate = function(timestamp) {
        var delta, elapsed;
        if (previousTimestamp === -1) {
          previousTimestamp = timestamp;
        }
        if (timestamp === previousTimestamp) {
          requestAnimationFrame(animate);
          elapsed = 0;
        } else {
          elapsed = timestamp - previousTimestamp;
          totalElapsed += elapsed;
          previousTimestamp = timestamp;
        }
        if (myKeyIsStillDown() && 75 <= totalElapsed && (_this.minCalibration <= calibration && calibration <= _this.maxCalibration)) {
          if (1.05 * calibration * amount < _this.calibrationBoundary) {
            calibration *= 1.05;
          }
          if (_this.calibrationBoundary < 0.95 * calibration * amount) {
            calibration *= 0.95;
          }
        }
        delta = Math.ceil(amount * (elapsed / duration) * calibration);
        delta = myKeyIsStillDown() ? delta : Math.max(0, Math.min(delta, amount - totalDelta));
        if (delta && performScroll(element, direction, sign * delta)) {
          totalDelta += delta;
          requestAnimationFrame(animate);
        } else {
          checkVisibility(element);
        }
      };
      requestAnimationFrame(animate);
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : window).Scroller = {
    init: function() {
      handlerStack.push({
        DOMActivate: function() {
          activatedElement = event.target;
          return true;
        }
      });
      CoreScroller.init();
    },
    setSmoothScroll: function(smoothScroll) {
      CoreScroller.smoothScroll = smoothScroll;
    },
    scrollBy: function(direction, amount, factor) {
      var element, elementAmount;
      if (factor == null) {
        factor = 1;
      }
      if (!document.body && amount instanceof Number) {
        if (direction === "x") {
          window.scrollBy(amount, 0);
        } else {
          window.scrollBy(0, amount);
        }
        return;
      }
      if (activatedElement) {
      } else if (activatedElement = document.body && firstScrollableElement(document.body)) {
      } else {
        return;
      }
      if (!CoreScroller.wouldNotInitiateScroll()) {
        element = findScrollableElement(activatedElement, direction, amount, factor);
        elementAmount = factor * getDimension(element, direction, amount);
        CoreScroller.scroll(element, direction, elementAmount);
      }
    },
    scrollTo: function(direction, pos) {
      var amount, element;
      if (activatedElement) {
      } else if (activatedElement = document.body && firstScrollableElement(document.body)) {
      } else {
        return;
      }
      element = findScrollableElement(activatedElement, direction, pos, 1);
      amount = getDimension(element, direction, pos) - element[scrollProperties[direction].axisName];
      CoreScroller.scroll(element, direction, amount);
    }
  };

})();
