// Generated by CoffeeScript 1.8.0
(function() {
  var BackgroundCompleter, Vomnibar, VomnibarUI, root;

  Vomnibar = {
    vomnibarUI: null,
    defaultRefreshInterval: 500,
    completers: {},
    getCompleter: function(name) {
      if (!(name in this.completers)) {
        this.completers[name] = new BackgroundCompleter(name);
      }
      return this.completers[name];
    },
    activateWithCompleter: function(completerName, refreshInterval, initialQueryValue, selectFirstResult, forceNewTab) {
      var completer = this.getCompleter(completerName);
      if (!this.vomnibarUI) {
        this.vomnibarUI = new VomnibarUI();
        this.vomnibarUI.initDom();
      }
      completer.refresh();
      this.vomnibarUI.setInitialSelectionValue(selectFirstResult ? 0 : -1);
      this.vomnibarUI.setCompleter(completer);
      this.vomnibarUI.setRefreshInterval(refreshInterval || this.defaultRefreshInterval);
      this.vomnibarUI.setForceNewTab(forceNewTab);
      this.vomnibarUI.reset(initialQueryValue);
    },
    activate: function() {
      this.activateWithCompleter("omni");
    },
    activateInNewTab: function() {
      this.activateWithCompleter("omni", 0, null, false, true);
    },
    activateTabSelection: function() {
      this.activateWithCompleter("tabs", 0, null, true);
    },
    activateBookmarks: function() {
      this.activateWithCompleter("bookmarks", 0, null, true);
    },
    activateBookmarksInNewTab: function() {
      this.activateWithCompleter("bookmarks", 0, null, true, true);
    },
    activateHistory: function() {
      this.activateWithCompleter("history", 0, null, true);
    },
    activateHistoryInNewTab: function() {
      this.activateWithCompleter("history", 0, null, true, true);
    },
    activateEditUrl: function() {
      this.activateWithCompleter("omni", 0, window.location.href);
    },
    activateEditUrlInNewTab: function() {
      this.activateWithCompleter("omni", 0, window.location.href, false, true);
    },
    getUI: function() {
      return this.vomnibarUI;
    }
  };

  VomnibarUI = (function() {
    function VomnibarUI() {
      this.refreshInterval = 0;
      this.completionInput = { url: "", action: "navigateToUrl", performAction: BackgroundCompleter.performAction };
    }

    VomnibarUI.prototype.setQuery = function(query) {
      this.input.value = query;
    };

    VomnibarUI.prototype.setInitialSelectionValue = function(initialSelectionValue) {
      this.initialSelectionValue = initialSelectionValue;
    };

    VomnibarUI.prototype.setCompleter = function(completer) {
      this.completer = completer;
    };

    VomnibarUI.prototype.setRefreshInterval = function(refreshInterval) {
      this.refreshInterval = refreshInterval;
    };

    VomnibarUI.prototype.setForceNewTab = function(forceNewTab) {
      this.forceNewTab = forceNewTab;
    };

    VomnibarUI.prototype.show = function() {
      this.box.style.display = "block";
      this.input.focus();
      this.input.addEventListener("input", this.eventHandlers.input);
      this.completionList.addEventListener("click", this.eventHandlers.click);
      this.completionList.addEventListener("DOMMouseScroll", this.eventHandlers.scroll);
      this.handlerId = handlerStack.push({
        keydown: this.eventHandlers.keyDown
      });
    };

    VomnibarUI.prototype.hide = function() {
      this.box.style.display = "none";
      this.completionList.style.display = "none";
      this.input.blur();
      handlerStack.remove(this.handlerId);
      this.input.removeEventListener("input", this.eventHandlers.input);
      this.completionList.removeEventListener("click", this.eventHandlers.click);
      this.completionList.removeEventListener("mousewheel", this.eventHandlers.scroll);
    };

    VomnibarUI.prototype.reset = function(input) {
      this.completionInput.url = this.input.value = input || "";
      this.update(0, this.show);
    };

    VomnibarUI.prototype.update = function(updateDelay, callback) {
      this.onUpdate = callback;
      if (typeof updateDelay === "number") {
        if (this.updateTimer) {
          window.clearTimeout(this.updateTimer);
          this.updateTimer = 0;
        }
        if (updateDelay <= 0) {
          this.updateCompletions();
          return;
        }
      } else if (this.updateTimer) {
        return;
      } else {
        updateDelay = this.refreshInterval;
      }
      this.updateTimer = setTimeout(this.eventHandlers.timer, updateDelay);
    };

    VomnibarUI.prototype.updateCompletions = function() {
      this.completer.filter(this.input.value, this.eventHandlers.completions);
    };

    VomnibarUI.prototype.populateUI = function() {
      this.completionList.innerHTML = this.completions.map(function(completion) {
        return "\n  <li>\n    " + completion.html + "\n  </li>";
      }).join("");
      this.completionList.style.display = this.completions.length > 0 ? "block" : "none";
      this.selection = (! this.completions[0]) ? -1 :
        (this.completions[0].type === "search") ? 0 : this.initialSelectionValue;
      this.updateSelection();
      this.selectionIsChanged = false;
    };

    VomnibarUI.prototype.updateSelection = function() {
      for (var _i = 0, _ref = this.completionList.children; _i < _ref.length; ++_i) {
        _ref[_i].className = "vimiumReset";
      }
      if (this.selection >= 0 && this.selection < _ref.length) {
        _ref = _ref[this.selection];
        _ref.className += " vomnibarSelected";
        _ref.scrollIntoViewIfNeeded();
      }
    };

    VomnibarUI.prototype.actionFromKeyEvent = function(event) {
      if (KeyboardUtils.isEscape(event)) {
        return "dismiss";
      } else if (event.keyCode === keyCodes.enter) {
        return "enter";
      }
      var key = KeyboardUtils.getKeyChar(event);
      if (key === "up" || (event.shiftKey && event.keyCode === keyCodes.tab) || (event.ctrlKey && (key === "k" || key === "p"))) {
        return "up";
      } else if (key === "down" || (event.keyCode === keyCodes.tab && !event.shiftKey) || (event.ctrlKey && (key === "j" || key === "n"))) {
        return "down";
      }
    };

    VomnibarUI.prototype.onKeydown = function(event) {
      var action = this.actionFromKeyEvent(event);
      while (!action) {
        action = KeyboardUtils.getKeyChar(event);
        if (event.shiftKey || event.ctrlKey || event.altKey) {
        }
        else if (this.selection == 0 && this.completions.length == 1 && action == ' ' && this.input.value.slice(-2) === "  ") {
          action = "enter";
          break;
        }
        else if (this.selection >= 0 && this.selectionIsChanged || document.activeElement !== this.input) {
          action = parseInt(action);
          if (action === 0) { action = 10; }
          if (action <= this.completions.length) {
            this.selection = action - 1;
            action = "enter";
            break;
          }
        }
        return true;
      }
      this.openInNewTab = this.forceNewTab || (event.shiftKey || event.ctrlKey || KeyboardUtils.isPrimaryModifierKey(event));
      this.onAction(action);
      DomUtils.suppressPropagation(event);
      event.preventDefault();
      return false;
    }

    VomnibarUI.prototype.onAction = function(action) {
      switch(action) {
      case "dismiss": this.hide(); break;
      case "up":
        if (this.selection <= -1) this.selection = this.completions.length;
        this.selectionIsChanged = true;
        this.selection -= 1;
        if (this.selection == -1) this.input.focus();
        this.input.value = this.completions[this.selection].url;
        this.updateSelection();
        break;
      case "down":
        this.selectionIsChanged = true;
        this.selection += 1;
        if (this.selection >= this.completions.length) {
          this.selection = -1;
          this.input.focus();
        }
        this.input.value = this.completions[this.selection].url;
        this.updateSelection();
        break;
      case "enter":
        this.onUpdate = function() {
          this.completions[this.selection].performAction(this);
          this.hide();
        };
        if (this.updateTimer) this.update(0, this.onUpdate);
        else if (this.selection >= 0 || this.input.value.trim().length > 0) {
          this.onUpdate();
          this.onUpdate = null;
        }
        break;
      default: break;
      }
    };

    VomnibarUI.prototype.onCompletions = function(completions) {
      completions[-1] = this.completionInput;
      this.completions = completions;
      this.populateUI();
      if (this.onUpdate) {
        var onUpdate = this.onUpdate;
        this.onUpdate = null;
        onUpdate.call(this);
      }
    };

    VomnibarUI.prototype.onTimer = function() {
      this.updateTimer = 0;
      this.updateCompletions();
    };

    VomnibarUI.prototype.onScroll = function(event) {
      DomUtils.suppressPropagation(event);
      event.preventDefault();
      return false;
    };

    VomnibarUI.prototype.onClick = function() {
      var el = event.target, ulist = this.completionList;
      while(el && el.parentElement != ulist) { el = el.parentElement; }
      for (var _i = 0, _ref = ulist.children; _i < _ref.length; ++_i) {
        if (_ref[_i] == el) {
          el = _i;
          break;
        }
      }
      if (typeof el != "number") { return false; }
      this.selection = el;
      this.openInNewTab = this.forceNewTab || (event.shiftKey || event.ctrlKey || KeyboardUtils.isPrimaryModifierKey(event));
      this.onAction("enter");
      return false;
    };

    VomnibarUI.prototype.onInput = function() {
      if (this.completions[this.selection].url.trimRight() != this.input.value.trim()) {
        this.update();
      }
      this.completionInput.url = this.input.value.trimLeft();
      return false;
    };

    VomnibarUI.prototype.template = [
      "<div id=\"vomnibar\" class=\"vimiumReset\">"
      , "\n  <div class=\"vimiumReset vomnibarSearchArea\">"
      , "\n    <input type=\"text\" class=\"vimiumReset\" />"
      , "\n  </div>"
      , "\n  <ul class=\"vimiumReset\"></ul>"
      , "\n</div>"
    ].join("");
    VomnibarUI.prototype.initDom = function() {
      this.box = Utils.createElementFromHtml(this.template);
      this.box.style.display = "none";
      document.body.appendChild(this.box);
      this.input = this.box.querySelector("input");
      this.completionList = this.box.querySelector("ul");
      this.completionList.style.display = "none";
      this.eventHandlers = {
        keyDown: this.onKeydown.bind(this)
        , input: this.onInput.bind(this)
        , click: this.onClick.bind(this)
        , scroll: this.onScroll.bind(this)
        , timer: this.onTimer.bind(this)
        , completions: this.onCompletions.bind(this)
      }
    };

    return VomnibarUI;

  })();

  BackgroundCompleter = (function() {

    function BackgroundCompleter(name) {
      this.name = name;
      if (BackgroundCompleter.prototype.filterPort) { return; }
      
      BackgroundCompleter.prototype.filterPort = chrome.runtime.connect({
        name: "filterCompleter"
      });
      chrome.runtime.sendMessage({
        handler: "refreshCompleter",
        name: this.name
      });
      BackgroundCompleter.prototype.filterPort.onMessage.addListener(BackgroundCompleter.onFilter);
    }

    BackgroundCompleter.prototype.refresh = function() {
    };

    BackgroundCompleter.onFilter = function(msg) {
      if (BackgroundCompleter.id != msg.id) { return; }
      var results = msg.results.map(function(result) {
        result.action = (result.type === "tab") ? "switchToTab"
          : ("sessionId" in result) ? "restoreSession"
          : "navigateToUrl";
        result.performAction = BackgroundCompleter.performAction;
        return result;
      });
      var callback = BackgroundCompleter.callback;
      BackgroundCompleter.callback = null;
      if (callback) {
        callback(results);
      }
    };
    
    BackgroundCompleter.prototype.filter = function(query, callback) {
      BackgroundCompleter.id = Utils.createUniqueId();
      BackgroundCompleter.callback = callback;
      this.filterPort.postMessage({
        name: this.name,
        id: BackgroundCompleter.id,
        query: query.replace(/\s+/g, ' ').trim()
      });
    };

    return BackgroundCompleter;
  })();

  extend(BackgroundCompleter, {
    performAction: function() {
      var action = BackgroundCompleter.completionActions[this.action] || this.action;
      if (typeof action !== "function") return;
      return action.apply(this, arguments);
    },
    completionActions: {
      navigateToUrl: function(data) {
        if (this.url.startsWith("javascript:")) {
          var script = document.createElement('script');
          script.textContent = decodeURIComponent(this.url.slice("javascript:".length));
          (document.head || document.documentElement).appendChild(script);
        } else {
          chrome.runtime.sendMessage({
            handler: data.openInNewTab ? "openUrlInNewTab" : "openUrlInCurrentTab",
            url: this.url.trimRight(),
            selected: data.openInNewTab
          });
        }
      },
      switchToTab: function() {
        chrome.runtime.sendMessage({
          handler: "selectSpecificTab",
          id: this.tabId
        });
      },
      restoreSession: function() {
        chrome.runtime.sendMessage({
          handler: "restoreSession",
          sessionId: this.sessionId,
        });
      }
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Vomnibar = Vomnibar;

}).call(this);
