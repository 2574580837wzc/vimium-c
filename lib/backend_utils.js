"use strict";
// Generated by CoffeeScript 1.8.0
var Utils = {
  getCurrentVersion: function() {
    return chrome.runtime.getManifest().version;
  },
  _escapeRegex: /[&<>]/g,
  _escapeCallback: function(c, n) {
    n = c.charCodeAt(0);
    return (n === 60) ? "&lt;" : (n === 62) ? "&gt;" : "&amp;";
  },
  escapeHtml: function(s) {
    return s.replace(this._escapeRegex, this._escapeCallback);
  },
  _chromePrefixes: ["about", "view-source", "chrome-search", "chrome-extension", "data", "javascript"],
  hasChromePrefix: function(url) {
    var index = url.indexOf(':');
    return index > 3 && index < 17 && this._chromePrefixes.indexOf(url.substring(0, index)) >= 0;
  },
  _urlPrefix: /^[a-z]{3,}:\/\/./,
  hasOrdinaryUrlPrefix: function(url) {
    return this._urlPrefix.test(url);
  },
  isRefusingIncognito: function(url) {
    url = url.toLowerCase();
    if (url.startsWith('chrome://')) {
      return !url.startsWith("chrome://downloads/");
    }
    return url !== Settings.ChromeInnerNewTab && (url.startsWith('chrome') || !this._urlPrefix.test(url));
  },
  _hostRegex: /^(?:[^:]+(?::[^:]+)?@)?([^:]+|\[[^\]]+\])(?::\d+)?$/,
  _longTlds: ["arpa", "asia", "coop", "info", "jobs", "local", "mobi", "museum", "name", "onion"],
  // condition: .length <= 3
  _fileExts: ["exe", "dll", "doc", "gz", "pdf", "tar", "tgz", "txt", "zip", "log"],
  _ipRegex: /^(\d{1,3}\.){3}\d{1,3}$/,
  _spacesRegex: /[\s\u3000]+/g,
  _nonDomainRegex: /[^0-9A-Za-z]/,
  convertToUrl: function(string) {
    var host, arr, type = -1, expected = 1, index, index0, oldString;
    oldString = string.replace(this._spacesRegex, ' ').trim();
    string = oldString.toLowerCase();
    index = string.indexOf(' ');
    if (index > 0 && string.startsWith("javascript:")) {
      type = 0;
    }
    else if (index > 0) {
      string = string.substring(0, index);
      if ((index = string.indexOf('/')) <= 0) {
        type = 2;
      }
      else if ((index0 = string.indexOf(':')) > 0) {
        if (string.substring(index0, index0 + 3) !== "://") {
          if (this._chromePrefixes.indexOf(string.substring(0, index0)) >= 0) {
            type = 2;
          } else {
            index0 = -1;
          }
        }
        else if (this._urlPrefix.test(string)) {
          expected = 0;
          if (string.startsWith("file:///")) {
            index0 = string.charCodeAt(8);
            type = (index0 > 32 && index0 !== 47) ? 0 : 2;
          }
        } else if (!this.startsWith("chrome")) {
          type = 2;
        }
      } else if (index0 === 0) {
        type = 2;
      }
      if (type < 0) {
        if (index0 > 0) {
          index0 += 3;
          index = string.indexOf('/', index0);
        } else {
          index0 = 0;
        }
        if (index > index0 && (type = string.charCodeAt(index + 1)) > 32 && type !== 47) {
          host = string.substring(index0, index);
          type = -1;
        } else {
          type = 2;
        }
      }
    }
    else if (this._urlPrefix.test(string)) {
      if (string.startsWith("file:") || string.startsWith("chrome:")) {
        type = 0;
      } else {
        index0 = string.indexOf(':') + 3;
        index = string.indexOf('/', index0);
        host = string.substring(index0, index >= 0 ? index : string.length);
        expected = 0;
      }
    } else if (this.hasChromePrefix(string)) {
      type = 0;
    } else if ((index = string.indexOf('/')) >= 0) {
      host = string.substring(0, index);
    } else {
      host = string;
    }
    if (type >= 0) {
    }
    else if (!(arr = this._hostRegex.exec(host))) {
      type = 2;
    }
    else if ((host = arr[1]).indexOf(':') >= 0 || host.endsWith("localhost")) {
      type = expected;
    }
    else if ((index = host.lastIndexOf('.')) >= 0) {
      if (this._ipRegex.test(host) || (host = host.substring(index + 1), 2 <= host.length
        && ((host.length > 3) ? (this._longTlds.indexOf(host) >= 0)
          : (this._fileExts.indexOf(host) < 0 && !this._nonDomainRegex.test(host)))
      )) {
        type = expected;
      }
    } else {
      type = 2;
    }
    return type === 0 ? oldString : type === 1 ? ("http://" + oldString)
      : this.createSearchUrl(Settings.get("searchEnginesMap")["\\"], oldString.split(' ')).url;
  },
  _searchWordRegex: /%[sS]/g,
  createSearchUrl: function(pattern, query, $S) {
    if ($S != null ? ($S === true) : pattern.$S) {
      $S = query.join(' ');
    }
    if (pattern.$s) {
      query = query.map(encodeURIComponent).join('+');
    }
    query = pattern.url.replace(this._searchWordRegex, function(s) {
      return (s === "%s") ? query : $S;
    });
    return {
      url: query,
      $S: $S
    };
  },
  distinctCharacters: function(str) {
    var char, unique, _i, _len, _ref;
    unique = "";
    _ref = str.split("").sort();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      char = _ref[_i];
      if (0 > unique.indexOf(char)) {
        unique += char;
      }
    }
    return unique;
  },
  compareVersions: function(versionA, versionB) {
    var a, b, i, _i, _ref;
    versionA = versionA.split('.');
    versionB = versionB.split('.');
    for (i = 0, _ref = Math.max(versionA.length, versionB.length); i < _ref; ++i) {
      a = parseInt(versionA[i] || 0, 10);
      b = parseInt(versionB[i] || 0, 10);
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      }
    }
    return 0;
  }
};

window.extend = function(hash1, hash2) {
  for (var key in hash2) {
    hash1[key] = hash2[key];
  }
  return hash1;
};
