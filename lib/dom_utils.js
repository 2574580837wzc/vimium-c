"use strict";
// Generated by CoffeeScript 1.3.3
(typeof exports !== "undefined" && exports !== null ? exports : window).DomUtils = {
  documentReady: (function() {
    var loaded = false, listeners = [], eventHandler = function() {
      var ref = listeners, i, len;
      loaded = true;
      listeners = [];
      window.removeEventListener("DOMContentLoaded", eventHandler);
      for (i = 0, len = ref.length; i < len; i++) {
        ref[i].call();
      }
    };
    window.addEventListener("DOMContentLoaded", eventHandler);
    return function(callback) {
      if (typeof callback !== "function") {
        return;
      }
      if (loaded) {
        callback();
      } else {
        listeners.push(callback);
      }
    };
  })(),
  addElementList: function(els, overlayOptions) {
    var parent, _i, _len;
    parent = document.createElement("div");
    if (overlayOptions.id != null) {
      parent.id = overlayOptions.id;
    }
    if (overlayOptions.className != null) {
      parent.className = overlayOptions.className;
    }
    for (_i = 0, _len = els.length; _i < _len; _i++) {
      parent.appendChild(els[_i]);
    }
    document.documentElement.appendChild(parent);
    return parent;
  },
  removeElement: function(el) {
    el.parentNode.removeChild(el);
  },
  makeXPath: function(elementArray) {
    for (var _i = 0, _len = elementArray.length * 2, element, xpath = new Array(_len); _i < _len; _i += 2) {
      element = elementArray[_i / 2];
      xpath[_i] = ".//" + element, xpath[_i + 1] = ".//xhtml:" + element;
    }
    return xpath.join(" | ");
  },
  namespaceResolver: function(namespace) {
    return (namespace === "xhtml") ? "http://www.w3.org/1999/xhtml" : null;
  },
  evaluateXPath: function(xpath, resultType) {
    return document.evaluate(xpath, document.webkitIsFullScreen ? document.webkitFullscreenElement
      : document.documentElement, this.namespaceResolver, resultType, null);
  },
  getVisibleClientRect: function(element) {
    var child, clientRect, clientRects, computedStyle, _i, _j, _len, _len1, _ref;
    clientRects = [].map.call(element.getClientRects(), Rect.copy);
    for (_i = 0, _len = clientRects.length; _i < _len; _i++) {
      clientRect = clientRects[_i];
      if (clientRect.width <= 0 || clientRect.height <= 0) {
        _ref = element.children;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          child = _ref[_j];
          computedStyle = window.getComputedStyle(child, null);
          if (computedStyle.getPropertyValue('float') === 'none' && computedStyle.getPropertyValue('position') !== 'absolute') {
            continue;
          }
          clientRect = this.getVisibleClientRect(child);
          if (clientRect != null) {
            return clientRect;
          }
        }
      } else {
        clientRect = this.cropRectToVisible(clientRect);
        if (clientRect == null || clientRect.width < 3 || clientRect.height < 3) {
          continue;
        }
        computedStyle = window.getComputedStyle(element, null);
        if (computedStyle.getPropertyValue('visibility') !== 'visible' || computedStyle.getPropertyValue('display') === 'none') {
          continue;
        }
        return clientRect;
      }
    }
    return null;
  },
  cropRectToVisible: function(rect) {
    var left, top, max = Math.max;
    return ((top = max(rect.top, 0)) < window.innerHeight - 4 && (left = max(rect.left, 0)) //
      < window.innerWidth - 4) ? Rect.create(left, top, rect.right, rect.bottom) : null;
  },
  getClientRectsForAreas: function(imgClientRect, areas) {
    var area, coords, diff, sqrt2 = Math.sqrt(2), rect, rects, x1, x2, y1, y2, _i, _len;
    rects = [];
    for (_i = 0, _len = areas.length; _i < _len; _i++) {
      area = areas[_i];
      coords = area.coords.split(",").map(parseInt);
      if (isNaN(coords[1])) {
        continue;
      }
      switch (area.shape.toLowerCase()) {
      case "circle": case "circ":
        y1 = coords[0], y2 = coords[1], diff = coords[2] / sqrt2;
        x1 = y1 - diff, x2 = y1 + diff, y1 = y2 - diff;
        y2 = y2 + diff;
        break;
      case "default":
        x1 = 0, y1 = 0, x2 = imgClientRect.width, y2 = imgClientRect.height;
        break;
      case "rect": case "rectangle": default:
        x1 = coords[0], y1 = coords[1], x2 = coords[2], y2 = coords[3];
        break;
      }
      rect = Rect.create(x1 + imgClientRect.left, y1 + imgClientRect.top //
        , x2 + imgClientRect.left, y2 + imgClientRect.top);
      rect = this.cropRectToVisible(rect);
      if (rect) {
        rects.push({
          element: area,
          rect: rect
        });
      }
    }
    return rects;
  },
  _unselectableTypes: ["button", "checkbox", "color", "file", "hidden", "image", "radio", "reset", "submit"],
  isSelectable: function(element) {
    return (element.nodeName.toLowerCase() === "input" && this._unselectableTypes.indexOf(element.type) === -1) || element.nodeName.toLowerCase() === "textarea";
  },
  simulateSelect: function(element) {
    element.focus();
    try {
      element.setSelectionRange(element.value.length, element.value.length);
    } catch (e) {
    }
  },
  _eventSequence: ["mouseover", "mousedown", "mouseup", "click"],
  simulateClick: function(element, modifiers) {
    var eventSequence = this._eventSequence, mouseEvent, _i, _len;
    modifiers || (modifiers = {});
    for (_i = 0, _len = eventSequence.length; _i < _len; _i++) {
      mouseEvent = document.createEvent("MouseEvents");
      mouseEvent.initMouseEvent(eventSequence[_i], true, true, window, 1, 0, 0, 0, 0, modifiers.ctrlKey, modifiers.altKey, modifiers.shiftKey, modifiers.metaKey, 0, null);
      element.dispatchEvent(mouseEvent);
    }
  },
  flashRectLastingTime: 400,
  flashRect: function(rect) {
    var flashEl = document.createElement("div");
    flashEl.id = "vimiumFlash";
    flashEl.className = "vimB vimR";
    flashEl.style.left = rect.left + window.scrollX + "px";
    flashEl.style.top = rect.top + window.scrollY + "px";
    flashEl.style.width = rect.width + "px";
    flashEl.style.height = rect.height + "px";
    document.documentElement.appendChild(flashEl);
    return setTimeout(function() {
      flashEl.parentNode.removeChild(flashEl);
    }, this.flashRectLastingTime);
  },
  suppressPropagation: function(event) {
    event.stopImmediatePropagation ? event.stopImmediatePropagation() : event.stopPropagation();
  },
  suppressEvent: function(event) {
    event.preventDefault();
    this.suppressPropagation(event);
  }
};

(typeof exports !== "undefined" && exports !== null ? exports : window).Rect = {
  create: function(x1, y1, x2, y2) {
    return {
      bottom: y2,
      height: y2 - y1,
      left: x1,
      right: x2,
      top: y1,
      width: x2 - x1
    };
  },
  copy: function(rect) {
    return {
      bottom: rect.bottom,
      height: rect.height,
      left: rect.left,
      right: rect.right,
      top: rect.top,
      width: rect.width
    };
  },
  SubtractSequence: function(rect2, rect1) { // 1 - 2
    var xm = Math.max(rect1.left, rect2.left), xM = Math.min(rect1.right, rect2.right) //
      , ym = Math.max(rect1.top, rect2.top), yM = Math.min(rect1.bottom, rect2.bottom);
    if (!(xM > xm && yM > ym)) {
      this.push(Rect.copy(rect1));
      return;
    }
    var x0 = rect1.left, x1 = rect1.right, y0 = rect1.top, y1 = rect1.bottom, new1 = Rect.create;
    if (y0 < ym) {
      this.push(new1(xm, y0, xM, ym));
      if (x0 < xm) {
        this.push(new1(x0, y0, xm, ym), new1(x0, ym, xm, yM));
      }
      if (xM < x1) {
        this.push(new1(xM, y0, x1, ym), new1(xM, ym, x1, yM));
      }
    } else {
      if (x0 < xm) {
        this.push(new1(x0, ym, xm, yM));
      }
      if (xM < x1) {
        this.push(new1(xM, ym, x1, yM));
      }
    }
    if (yM < y1) {
      this.push(new1(xm, yM, xM, y1));
      if (x0 < xm) {
        this.push(new1(x0, yM, xm, y1));
      }
      if (xM < x1) {
        this.push(new1(xM, yM, x1, y1));
      }
    }
  }
};