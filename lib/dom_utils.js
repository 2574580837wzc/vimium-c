"use strict";
// Generated by CoffeeScript 1.3.3
(typeof exports !== "undefined" && exports !== null ? exports : window).DomUtils = {
  documentReady: (function() {
    var loaded = document.readyState !== "loading", listeners, eventHandler = function() {
      var ref, i, len;
      loaded = true;
      ref = listeners;
      window.removeEventListener("DOMContentLoaded", eventHandler);
      listeners = eventHandler = null;
      for (i = 0, len = ref.length; i < len; i++) {
        ref[i].call();
      }
    };
    return function(callback) {
      if (typeof callback !== "function") {}
      else if (loaded || document.readyState !== "loading") {
        loaded = true;
        callback();
      } else if (listeners) {
        listeners.push(callback);
      } else {
        window.addEventListener("DOMContentLoaded", eventHandler);
        listeners = [callback];
      }
    };
  })(),
  addElementList: function(els, overlayOptions) {
    var parent, _i, _len;
    parent = document.createElement("div");
    if (overlayOptions.id != null) {
      parent.id = overlayOptions.id;
    }
    if (overlayOptions.className != null) {
      parent.className = overlayOptions.className;
    }
    for (_i = 0, _len = els.length; _i < _len; _i++) {
      parent.appendChild(els[_i]);
    }
    document.documentElement.appendChild(parent);
    return parent;
  },
  removeElement: function(el) {
    el.parentNode.removeChild(el);
  },
  makeXPath: function(elementArray) {
    for (var _i = 0, _len = elementArray.length * 2, element, xpath = new Array(_len); _i < _len; _i += 2) {
      element = elementArray[_i / 2];
      xpath[_i] = ".//" + element, xpath[_i + 1] = ".//xhtml:" + element;
    }
    return xpath.join(" | ");
  },
  namespaceResolver: function(namespace) {
    return (namespace === "xhtml") ? "http://www.w3.org/1999/xhtml" : null;
  },
  evaluateXPath: function(xpath, resultType) {
    return document.evaluate(xpath, document.webkitIsFullScreen ? document.webkitFullscreenElement
      : document.documentElement, this.namespaceResolver, resultType, null);
  },
  getVisibleClientRect: function(element) {
    var child, clientRect, rect0, clientRects, computedStyle, _i, _j, _len, _len1, _ref;
    clientRects = element.getClientRects();
    for (_i = 0, _len = clientRects.length; _i < _len; _i++) {
      rect0 = clientRects[_i];
      if (rect0.width <= 0 || rect0.height <= 0) {
        _ref = element.children;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          child = _ref[_j];
          computedStyle = window.getComputedStyle(child, null);
          if (computedStyle.getPropertyValue('float') === 'none' && computedStyle.getPropertyValue('position') !== 'absolute') {
            continue;
          }
          if (clientRect = this.getVisibleClientRect(child)) {
            return clientRect;
          }
        }
      } else {
        clientRect = Rect.cropRectToVisible(rect0.left, rect0.top, rect0.right, rect0.bottom);
        if (clientRect == null || clientRect.width < 3 || clientRect.height < 3) {
          continue;
        }
        computedStyle = window.getComputedStyle(element, null);
        if (computedStyle.getPropertyValue('visibility') !== 'visible' || computedStyle.getPropertyValue('display') === 'none') {
          continue;
        }
        return clientRect;
      }
    }
    return null;
  },
  getClientRectsForAreas: function(output, imgClientRect, areas) {
    var area, coords, diff, sqrt2 = Math.sqrt(2), rect, x1, x2, y1, y2, _i, _len;
    for (_i = 0, _len = areas.length; _i < _len; _i++) {
      area = areas[_i];
      coords = area.coords.split(",").map(parseInt);
      if (isNaN(coords[1])) {
        continue;
      }
      switch (area.shape.toLowerCase()) {
      case "circle": case "circ":
        y1 = coords[0], y2 = coords[1], diff = coords[2] / sqrt2;
        x1 = y1 - diff, x2 = y1 + diff, y1 = y2 - diff;
        y2 = y2 + diff;
        break;
      case "default":
        x1 = 0, y1 = 0, x2 = imgClientRect.width, y2 = imgClientRect.height;
        break;
      case "rect": case "rectangle": default:
        x1 = coords[0], y1 = coords[1], x2 = coords[2], y2 = coords[3];
        break;
      }
      rect = Rect.cropRectToVisible(x1 + imgClientRect.left, y1 + imgClientRect.top //
        , x2 + imgClientRect.left, y2 + imgClientRect.top);
      if (rect) {
        output.push({
          element: area,
          rect: rect,
          notSecond: true
        });
      }
    }
  },
  _unselectableTypes: ["button", "checkbox", "color", "file", "hidden", "image", "radio", "reset", "submit"],
  isSelectable: function(element) {
    return (element.nodeName.toLowerCase() === "input" && this._unselectableTypes.indexOf(element.type) === -1) || element.nodeName.toLowerCase() === "textarea";
  },
  simulateSelect: function(element) {
    element.focus();
    try {
      var len = element.value ? +element.value.length : -1;
      if (len >= 0 && element.setSelectionRange) {
        element.setSelectionRange(len, len);
      }
    } catch (e) {
    }
  },
  _eventSequence: ["mouseover", "mousedown", "mouseup", "click"],
  simulateClick: function(element, modifiers) {
    var eventSequence = this._eventSequence, mouseEvent, _i, _len;
    modifiers || (modifiers = {});
    for (_i = 0, _len = eventSequence.length; _i < _len; _i++) {
      mouseEvent = document.createEvent("MouseEvents");
      mouseEvent.initMouseEvent(eventSequence[_i], true, true, window, 1, 0, 0, 0, 0, modifiers.ctrlKey, modifiers.altKey, modifiers.shiftKey, modifiers.metaKey, 0, null);
      element.dispatchEvent(mouseEvent);
    }
  },
  flashRectLastingTime: 400,
  flashRect: function(rect) {
    var flashEl = document.createElement("div");
    flashEl.className = "vimB vimR vimFlash";
    flashEl.style.left = rect.left + window.scrollX + "px";
    flashEl.style.top = rect.top + window.scrollY + "px";
    flashEl.style.width = rect.width + "px";
    flashEl.style.height = rect.height + "px";
    document.documentElement.appendChild(flashEl);
    return setTimeout(function() {
      flashEl.parentNode.removeChild(flashEl);
    }, this.flashRectLastingTime);
  },
  suppressPropagation: function(event) {
    event.stopImmediatePropagation();
  },
  suppressEvent: function(event) {
    event.preventDefault();
    this.suppressPropagation(event);
  }
};

(typeof exports !== "undefined" && exports !== null ? exports : window).Rect = {
  create: function(x1, y1, x2, y2) {
    return {
      bottom: y2,
      height: y2 - y1,
      left: x1,
      right: x2,
      top: y1,
      width: x2 - x1
    };
  },
  copy: function(rect) {
    return {
      bottom: rect.bottom,
      height: rect.height,
      left: rect.left,
      right: rect.right,
      top: rect.top,
      width: rect.width
    };
  },
  cropRectToVisible: function(left, top, right, bottom) {
    return ((top = Math.max(top, 0)) < window.innerHeight - 4 && (left = Math.max(left, 0)) //
      < window.innerWidth - 4) ? this.create(left, top, right, bottom) : null;
  },
  SubtractSequence: function(rect2, rect1) { // rect1 - rect2
    var x1 = Math.max(rect1.left, rect2.left), x2 = Math.min(rect1.right, rect2.right) //
      , y1 = Math.max(rect1.top, rect2.top), y2 = Math.min(rect1.bottom, rect2.bottom);
    if (!(x2 > x1 && y2 > y1)) {
      this.push(rect1);
      return;
    }
    // 1 2 4
    // 3   5
    // 6 7 8
    var x0 = rect1.left, x3 = rect1.right, y0 = rect1.top, y3 = rect1.bottom, new1 = Rect.create;
    if (y0 < y1) {
      if (y2 < y3) {
        if (x0 < x1) {
          if (x2 < x3) {
            this.push(new1(x0, y0, x1, y1), new1(x1, y0, x2, y1), new1(x0, y1, x1, y2), new1(x2, y0, x3, y1), new1(x2, y1, x3, y2), new1(x0, y2, x1, y3), new1(x1, y2, x2, y3), new1(x2, y2, x3, y3)); // 1 2 3 4 5 6 7 8
          } else {
            this.push(new1(x0, y0, x1, y1), new1(x1, y0, x2, y1), new1(x0, y1, x1, y2), new1(x0, y2, x1, y3), new1(x1, y2, x2, y3)); // 1 2 3 6 7
          }
        } else if (x2 < x3) {
          this.push(new1(x1, y0, x2, y1), new1(x2, y0, x3, y1), new1(x2, y1, x3, y2), new1(x1, y2, x2, y3), new1(x2, y2, x3, y3)); // 2 4 5 7 8
        } else {
          this.push(new1(x1, y0, x2, y1), new1(x1, y2, x2, y3)); // 2 7
        }
      } else if (x0 < x1) {
        if (x2 < x3) {
          this.push(new1(x0, y0, x1, y1), new1(x1, y0, x2, y1), new1(x0, y1, x1, y2), new1(x2, y0, x3, y1), new1(x2, y1, x3, y2)); // 1 2 3 4 5
        } else {
          this.push(new1(x0, y0, x1, y1), new1(x1, y0, x2, y1), new1(x0, y1, x1, y2)); // 1 2 3
        }
      } else if (x2 < x3) {
        this.push(new1(x1, y0, x2, y1), new1(x2, y0, x3, y1), new1(x2, y1, x3, y2)); // 2 4 5
      } else {
        this.push(new1(x1, y0, x2, y1)); // 2
      }
    } else if (y2 < y3) {
      if (x0 < x1) {
        if (x2 < x3) {
          this.push(new1(x0, y1, x1, y2), new1(x2, y1, x3, y2), new1(x0, y2, x1, y3), new1(x1, y2, x2, y3), new1(x2, y2, x3, y3)); // 3 5 6 7 8
        } else {
          this.push(new1(x0, y1, x1, y2), new1(x0, y2, x1, y3), new1(x1, y2, x2, y3)); // 3 6 7
        }
      } else if (x2 < x3) {
        this.push(new1(x2, y1, x3, y2), new1(x1, y2, x2, y3), new1(x2, y2, x3, y3)); // 5 7 8
      } else {
        this.push(new1(x1, y2, x2, y3)); // 7
      }
    } else if (x0 < x1) {
      if (x2 < x3) {
        this.push(new1(x0, y1, x1, y2), new1(x2, y1, x3, y2)); // 3 5
      } else {
        this.push(new1(x0, y1, x1, y2)); // 3
      }
    } else if (x2 < x3) {
      this.push(new1(x2, y1, x3, y2)); // 5
    }
  }
};