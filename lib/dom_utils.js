"use strict";
// Generated by CoffeeScript 1.3.3
(typeof exports !== "undefined" && exports !== null ? exports : window).DomUtils = {
  documentReady: (function() {
    var loaded = false, listeners = [], eventHandler = function() {
      var ref = listeners, i, len;
      loaded = true;
      listeners = [];
      window.removeEventListener("DOMContentLoaded", eventHandler);
      for (i = 0, len = ref.length; i < len; i++) {
        ref[i].call();
      }
    };
    window.addEventListener("DOMContentLoaded", eventHandler);
    return function(callback) {
      if (typeof callback !== "function") {
        return;
      }
      if (loaded) {
        callback();
      } else {
        listeners.push(callback);
      }
    };
  })(),
  addElementList: function(els, overlayOptions) {
    var parent, _i, _len;
    parent = document.createElement("div");
    if (overlayOptions.id != null) {
      parent.id = overlayOptions.id;
    }
    if (overlayOptions.className != null) {
      parent.className = overlayOptions.className;
    }
    for (_i = 0, _len = els.length; _i < _len; _i++) {
      parent.appendChild(els[_i]);
    }
    document.documentElement.appendChild(parent);
    return parent;
  },
  removeElement: function(el) {
    el.parentNode.removeChild(el);
  },
  makeXPath: function(elementArray) {
    for (var _i = 0, _len = elementArray.length, xpath = new Array(_len); _i < _len; _i++) {
      xpath[_i] = "//" + elementArray[_i] + " | //xhtml:" + elementArray[_i];
    }
    return xpath.join(" | ");
  },
  evaluateXPath: function(xpath, resultType) {
    var namespaceResolver;
    namespaceResolver = function(namespace) {
      if (namespace === "xhtml") {
        return "http://www.w3.org/1999/xhtml";
      } else {
        return null;
      }
    };
    return document.evaluate(xpath, document.documentElement, namespaceResolver, resultType, null);
  },
  getVisibleClientRect: function(element) {
    var child, childClientRect, clientRect, clientRects, computedStyle, _i, _k, _len, _len2, _ref;
    clientRects = [];
    _ref = element.getClientRects();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      clientRect = _ref[_i];
      clientRects.push({
        top: clientRect.top,
        right: clientRect.right,
        bottom: clientRect.bottom,
        left: clientRect.left,
        width: clientRect.width,
        height: clientRect.height
      });
    }
    for (_i = 0, _len = clientRects.length; _i < _len; _i++) {
      clientRect = clientRects[_i];
      if (clientRect.top < 0) {
        clientRect.height += clientRect.top;
        clientRect.top = 0;
      }
      if (clientRect.left < 0) {
        clientRect.width += clientRect.left;
        clientRect.left = 0;
      }
      if (clientRect.top >= window.innerHeight - 4 || clientRect.left >= window.innerWidth - 4) {
        continue;
      }
      if (clientRect.width < 3 || clientRect.height < 3) {
        continue;
      }
      computedStyle = window.getComputedStyle(element, null);
      if (computedStyle.getPropertyValue('visibility') !== 'visible' || computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('opacity') === '0') {
        continue;
      }
      return clientRect;
    }
    for (_i = 0, _len = clientRects.length; _i < _len; _i++) {
      clientRect = clientRects[_i];
      if (clientRect.width === 0 || clientRect.height === 0) {
        _ref = element.children;
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          child = _ref[_k];
          computedStyle = window.getComputedStyle(child, null);
          if (computedStyle.getPropertyValue('float') === 'none' && computedStyle.getPropertyValue('position') !== 'absolute') {
            continue;
          }
          childClientRect = this.getVisibleClientRect(child);
          if (childClientRect === null) {
            continue;
          }
          return childClientRect;
        }
      }
    }
    return null;
  },
  _unselectableTypes: ["button", "checkbox", "color", "file", "hidden", "image", "radio", "reset", "submit"],
  isSelectable: function(element) {
    return (element.nodeName.toLowerCase() === "input" && this._unselectableTypes.indexOf(element.type) === -1) || element.nodeName.toLowerCase() === "textarea";
  },
  simulateSelect: function(element) {
    element.focus();
    try {
      element.setSelectionRange(element.value.length, element.value.length);
    } catch (e) {
    }
  },
  _eventSequence: ["mouseover", "mousedown", "mouseup", "click"],
  simulateClick: function(element, modifiers) {
    var eventSequence = this._eventSequence, mouseEvent, _i, _len;
    modifiers || (modifiers = {});
    for (_i = 0, _len = eventSequence.length; _i < _len; _i++) {
      mouseEvent = document.createEvent("MouseEvents");
      mouseEvent.initMouseEvent(eventSequence[_i], true, true, window, 1, 0, 0, 0, 0, modifiers.ctrlKey, modifiers.altKey, modifiers.shiftKey, modifiers.metaKey, 0, null);
      element.dispatchEvent(mouseEvent);
    }
  },
  flashRectLastingTime: 400,
  flashRect: function(rect) {
    var flashEl = document.createElement("div");
    flashEl.id = "vimiumFlash";
    flashEl.className = "vimB vimR";
    flashEl.style.left = rect.left + window.scrollX + "px";
    flashEl.style.top = rect.top + window.scrollY + "px";
    flashEl.style.width = rect.width + "px";
    flashEl.style.height = rect.height + "px";
    document.documentElement.appendChild(flashEl);
    return setTimeout(function() {
      flashEl.parentNode.removeChild(flashEl);
    }, this.flashRectLastingTime);
  },
  suppressPropagation: function(event) {
    event.stopImmediatePropagation ? event.stopImmediatePropagation() : event.stopPropagation();
  },
  suppressEvent: function(event) {
    event.preventDefault();
    this.suppressPropagation(event);
  }
};