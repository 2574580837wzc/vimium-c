"use strict";
// Generated by CoffeeScript 1.8.0
(typeof global !== "undefined" ? (window || global) : window).HandlerStack = function HandlerStack(events) {
  var stacks, events2, _i;
  this.stacks = stacks = {};
  this._counter = 1;
  this.table = [];
  this.current = null;
  events = events || this.defaultEvents;
  _i = events.length;
  this.events = events2 = new Array(_i);
  while (0 <= --_i) {
    stacks[events2[_i] = events[_i]] = []; // create a copy of event array
  };
};

(typeof global !== "undefined" ? (window || global) : window).HandlerStack.prototype = {  
  defaultEvents: ["keydown", "keypress", "keyup", "DOMActivate"],
  genId: function() {
    return ++this._counter;
  },
  push: function(handler) {
    var stacks = this.stacks, events = this.events, _i = events.length, line, key, func;
    line = new Array(_i + 1);
    line[_i] = this.genId();
    while (0 <= --_i) {
      key = events[_i];
      func = handler[key];
      if (!func) {
        line[_i] = null;
        continue;
      }
      stacks[key].push(func);
      line[_i] = func;
    }
    this.table.push(line);
    return line[events.length];
  },
  bubbleEvent: function(type, event) {
    var handler, _ref = this.stacks[type], _i = _ref ? _ref.length : 0;
    while (0 <= --_i) {
      handler = this.current = _ref[_i];
      if (handler && ! handler.call(this, event)) {
        DomUtils.suppressEvent(event);
        this.current = null;
        return false;
      }
    }
    this.current = null;
    return true;
  },
  remove: function(id) {
    var line, func, stack, table = this.table, events = this.events, _i = table.length, _last = events.length;
    if (this.current) {
      func = this.current;
      while (0 <= --_i) {
        line = table[_i];
        if (line.lastIndexOf(func) >= 0) {
          break;
        }
      }
      if (_i >= 0 && id >= 0 && id !== line[_last]) {
        console.log("error %cremove handlers:", "color:red;", id, "!==", "[" + _i + "]", line);
        return -1;
      }
    }
    else if (id >= 0) {
      while (0 <= --_i) {
        line = table[_i];
        if (line[_last] === id) {
          break;
        }
      }
    }
    if (_i < 0) {
      return -1;
    }
    table.splice(_i, 1);
    while (0 <= --_last) {
      if (!(func = line[_last])) {
        continue;
      }
      stack = this.stacks[events[_last]];
      stack.splice(stack.lastIndexOf(func), 1);
    }
    return line[events.length];
  }
}