// Generated by CoffeeScript 1.8.0
(typeof exports !== "undefined" && exports !== null ? exports : window).Utils = {
  _div: undefined,
  getCurrentVersion: function() {
    return chrome.runtime.getManifest().version;
  },
  invokeCommandString: function(str, argArray) {
    var component, components, func, obj, _i, _len, _ref;
    components = str.split('.');
    obj = window;
    _ref = components.slice(0, -1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      component = _ref[_i];
      obj = obj[component];
    }
    func = obj[components.pop()];
    return func.apply(obj, argArray);
  },
  createElementFromHtml: function(html) {
    var tmp = this._div || (this._div = document.createElement("div"));
    tmp.innerHTML = html;
    html = tmp.firstChild;
    tmp.innerHTML = "";
    return html;
  },
  _escapeRegex: /[&<>]/g,
  escapeHtml: function(s) {
    return s.replace(this._escapeRegex, function(c) {
      return (c === '<') ? "&lt;" : (c === '>') ? "&gt;" : "&amp;";
    });
  },
  createUniqueId: (function() {
    var i = 1;
    return function() {
      return ++i;
    };
  })(),
  _chromePrefixes: ["about:", "view-source:", "extension:", "chrome:", "chrome-search:", "chrome-extension:", "data:"],
  hasChromePrefix: function(url) {
    var _ref, _i, _len;
    if (0 < url.indexOf(':')) {
      for (_i = 0, _ref = this._chromePrefixes, _len = _ref.length; _i < _len; _i++) {
        if (url.startsWith(_ref[_i])) {
          return true;
        }
      }
    }
    return false;
  },
  _urlPrefix: /^[a-z]{3,}:\/\/./i,
  hasFullUrlPrefix: function(url) {
    return this._urlPrefix.test(url);
  },
  createFullUrl: function(partialUrl) {
    if (this._urlPrefix.test(partialUrl)) {
      return partialUrl;
    } else {
      return "http://" + partialUrl;
    }
  },
  _urlRegex: /^(?:([^:]+)(?::([^:]+))?@)?([^:]+|\\[[^\\]]+\\])(?::(\\d+))?$/,
  _longTlds: ["arpa", "asia", "coop", "info", "jobs", "local", "mobi", "museum", "name", "onion"],
  _specialHostNames: ["localhost"],
  _ipRegex: /^(\d{1,3}\.){3}\d{1,3}$/,
  isUrl: function(str) {
    var dottedParts, hostName, lastPart, match, _ref;
    if (str.indexOf(' ') >= 0) {
      return false;
    }
    if (this._urlPrefix.test(str)) {
      return true;
    }
    match = this._urlRegex.exec(str.split('/', 1)[0]);
    if (!match) {
      return false;
    }
    hostName = match[3];
    if (this._specialHostNames.indexOf(hostName) >= 0) {
      return true;
    }
    if (hostName.indexOf(':') >= 0) {
      return true;
    }
    dottedParts = hostName.split('.');
    if (dottedParts.length > 1) {
      lastPart = dottedParts.pop();
      if ((2 <= (_ref = lastPart.length) && _ref <= 3) || this._longTlds.indexOf(lastPart) >= 0) {
        return true;
      }
    }
    if (this._ipRegex.test(hostName)) {
      return true;
    }
    return false;
  },
  isTabWithSameUrl: function(old, newTab) {
    var temp;
    if (old) {
      if (old.nohash == null) {
        temp = old.url.indexOf('#');
        old.nohash = temp > 0 ? old.url.substring(0, temp) : old.url;
      }
      temp = newTab.url.indexOf('#');
      if (temp > 0 && (newTab.nohash = newTab.url.substring(0, temp)) === old.nohash) {
        return true;
      }
    }
    return false;
  },
  _searchWordRegex: /%s/g,
  createSearchUrl: function(baseUrl, query) {
    return baseUrl.replace(this._searchWordRegex, encodeURIComponent(query));
  },
  convertToUrl: function(string) {
    string = string.trim();
    if (this.hasChromePrefix(string)) {
      return string;
    } else if (this.isUrl(string)) {
      return this.createFullUrl(string);
    } else {
      return this.createSearchUrl(Settings.get("searchUrl"), string);
    }
  },
  isString: function(obj) {
    return typeof obj === "string" || obj instanceof String;
  },
  compareVersions: function(versionA, versionB) {
    var a, b, i, _i, _ref;
    versionA = versionA.split('.');
    versionB = versionB.split('.');
    for (i = 0, _ref = Math.max(versionA.length, versionB.length); i < _ref; ++i) {
      a = parseInt(versionA[i] || 0, 10);
      b = parseInt(versionB[i] || 0, 10);
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      }
    }
    return 0;
  },
  zip: function(arrays) {
    return arrays[0].map(function(_, i) {
      return arrays.map(function(array) {
        return array[i];
      });
    });
  },
  _upperRegex: /[A-Z]/,
  hasUpperCase: function(s) {
    return this._upperRegex.test(s);
  }
};

Function.prototype.curry = function() {
  var __slice = Array.prototype.slice, fixedArguments = __slice.call(arguments, 0), fn = this;
  return function() {
    return fn.apply(this, fixedArguments.concat(__slice.call(arguments, 0)));
  };
};

Array.copy = function(array) {
  return Array.prototype.slice.call(array, 0);
};

String.prototype.startsWith || (String.prototype.startsWith = function(str) {
  return this.substring(0, str.length) === str;
});

(typeof global !== "undefined" ? (window || global) : window).extend = function(hash1, hash2) {
  for (var key in hash2) {
    hash1[key] = hash2[key];
  }
  return hash1;
};
