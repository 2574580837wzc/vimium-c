"use strict";
// Generated by CoffeeScript 1.8.0
(typeof exports !== "undefined" && exports !== null ? exports : window).Utils = {
  _div: undefined,
  _getDiv: function () {
    return this._div || (this._div = document.createElement("div"));
  },
  getCurrentVersion: function() {
    return chrome.runtime.getManifest().version;
  },
  invokeCommandString: function(str, arg) {
    var components = str.split('.'), obj = window, _i, _len, _ref;
    for (_i = 0, _len = components.length - 1; _i < _len; _i++) {
      obj = obj[components[_i]];
    }
    obj[components[_len]](arg);
  },
  _wordHeadIs$: /\W\$\w/,
  templateVarRegex: /\{\{(\$?[A-Z\_a-z][0-9A-Z\_a-z]*)\}\}/g,
  makeListRenderByReplace: function(template, varRegex) {
    var t = template, r = varRegex || this.templateVarRegex, o = null,
    $ = (r.source.indexOf("\\$") >= 0 && t.match(r).join("").search(this._wordHeadIs$) >= 0),
    p = !$ ? null : {
      $index: 0
    }, f = $ ? function(_, k) {
      return k in o ? o[k] : k in p ? p[k] : "";
    } : function(_, k) {
      return k in o ? o[k] : "";
    }, m = $ ? function(i, j) {
      o = i;
      p.$index = "" + j;
      return t.replace(r, f);
    } : function(i) {
      o = i;
      return t.replace(r, f);
    };
    template = null;
    varRegex = null;
    return function(objectArray) {
      var html = objectArray.map(m).join("");
      o = null;
      return html;
    };
  },
  makeListRenderBySplit: function(template, varRegex) {
    var varRegex = varRegex || this.templateVarRegex, o = null, a = template.split(varRegex),
    $ = (varRegex.source.indexOf("\\$") >= 0 && template.match(varRegex).join("").search(this._wordHeadIs$) >= 0),
    p = !$ ? null : {
      $index: 0
    }, f = $ ? function(w, i) {
      return i & 1 ? (w in o ? o[w] : w in p ? p[w] : "") : w;
    } : function(w, i) {
      return i & 1 ? (w in o ? o[w] : "") : w;
    }, m = $ ? function(i, j) {
      o = i;
      p.$index = "" + j;
      return a.map(f).join("");
    } : function(i) {
      o = i;
      return a.map(f).join("");
    };
    template = null;
    varRegex = null;
    return function(objectArray) {
      var html = objectArray.map(m).join("");
      o = null;
      return html;
    };
  },
  createElementFromHtml: function(html) {
    var tmp = this._getDiv();
    tmp.innerHTML = html;
    html = tmp.firstElementChild;
    tmp.innerHTML = "";
    return html;
  },
  encodeHtmlFromText: function(text) {
    var tmp = this._getDiv();
    tmp.innerText = text;
    text = tmp.innerHTML;
    tmp.innerHTML = "";
    return text;
  },
  decodeTextFromHtml: function(html) {
    var tmp = this._getDiv();
    tmp.innerHTML = html;
    html = tmp.innerText;
    tmp.innerHTML = "";
    return html;
  },
  _spaceRegex: /[\xa0|\u3000]/g,
  correctSpace: function(str) {
    return str.replace(this._spaceRegex, ' ');
  },
  _escapeRegex: /[&<>]/g,
  _escapeCallback: function(c) {
    return (c === '<') ? "&lt;" : (c === '>') ? "&gt;" : "&amp;";
  },
  escapeHtml: function(s) {
    return s.replace(this._escapeRegex, this._escapeCallback);
  },
  createUniqueId: (function() {
    var i = 1;
    return function() {
      return ++i;
    };
  })(),
  _chromePrefixes: ["about", "view-source", "chrome-search", "chrome-extension", "data", "javascript"],
  hasChromePrefix: function(url) {
    var index = url.indexOf(':');
    return index > 3 && index < 17 && this._chromePrefixes.indexOf(url.substring(0, index)) >= 0;
  },
  _urlPrefix: /^[a-z]{3,}:\/\//,
  hasOrdinaryUrlPrefix: function(url) {
    return this._urlPrefix.test(url);
  },
  isRefusingIncognito: function(url) {
    url = url.toLowerCase();
    return url.startsWith('chrome://') || url.startsWith('chrome-extension://') || !this.hasOrdinaryUrlPrefix(url);
  },
  _urlRegex: /^(?:[^:]+(?::[^:]+)?@)?([^:]+|\[[^\]]+\])(?::\d+)?$/,
  _longTlds: ["arpa", "asia", "coop", "info", "jobs", "local", "mobi", "museum", "name", "onion"],
  // condition: .length <= 3
  _fileExts: ["exe", "dll", "doc", "gz", "pdf", "tar", "tgz", "txt", "zip", "log"],
  _ipRegex: /^(\d{1,3}\.){3}\d{1,3}$/,
  convertToUrl: function(string) {
    var host, arr, type = 2, index;
    string = string.trim();
    if (string.indexOf(' ') >= 0) {
    }
    else if (this._urlPrefix.test(string) || this.hasChromePrefix(string)) {
      type = 0;
    }
    else if (!(arr = this._urlRegex.exec((index = string.indexOf('/')) >= 0
      ? string.substring(0, index) : string
    ))) {
      type = 2;
    }
    else if ((host = arr[1]).indexOf(':') >= 0 || host.endsWith("localhost")) {
      type = 1;
    }
    else if ((index = host.lastIndexOf('.')) >= 0) {
      if (this._ipRegex.test(host) || (host = host.substring(index + 1), 2 <= host.length
        && ((host.length > 3) ? (this._longTlds.indexOf(host) >= 0) : (this._fileExts.indexOf(host) < 0))
      )) {
        type = 1;
      }
    }
    return type === 0 ? string : type === 1 ? ("http://" + string)
      : this.createSearchUrl(Settings.get("searchUrl"), [string]);
  },
  isTabWithSameUrl: function(old, newTab) {
    var temp;
    if (old) {
      if (old.nohash == null) {
        temp = old.url.indexOf('#');
        old.nohash = temp > 0 ? old.url.substring(0, temp) : old.url;
      }
      temp = newTab.url.indexOf('#');
      if (temp > 0 && (newTab.nohash = newTab.url.substring(0, temp)) === old.nohash) {
        return true;
      }
    }
    return false;
  },
  _searchWordRegex: /%s/g,
  createSearchUrl: function(baseUrl, query) {
    baseUrl = baseUrl.replace(this._searchWordRegex, encodeURIComponent(query.join(" ")))
    try {
      baseUrl = decodeURI(baseUrl);
    } catch (e) {
    }
    return baseUrl;
  },
  decodeURI: function(url) {
    try {
      url = window.decodeURI(url);
    } catch (e) {
    }
    return url;
  },
  isString: function(obj) {
    return typeof obj === "string" || obj instanceof String;
  },
  distinctCharacters: function(str) {
    var char, unique, _i, _len, _ref;
    unique = "";
    _ref = str.split("").sort();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      char = _ref[_i];
      if (0 > unique.indexOf(char)) {
        unique += char;
      }
    }
    return unique;
  },
  compareVersions: function(versionA, versionB) {
    var a, b, i, _i, _ref;
    versionA = versionA.split('.');
    versionB = versionB.split('.');
    for (i = 0, _ref = Math.max(versionA.length, versionB.length); i < _ref; ++i) {
      a = parseInt(versionA[i] || 0, 10);
      b = parseInt(versionB[i] || 0, 10);
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      }
    }
    return 0;
  },
  _chromeVerRegex: /Chrome\/([\.\d]+?)\s/,
  haveChromeVersion: function(required) {
    var chromeVersion, _ref;
    chromeVersion = (_ref = navigator.appVersion.match(this._chromeVerRegex)) && _ref[1];
    return chromeVersion && 0 <= Utils.compareVersions(chromeVersion, required);
  },
  zip: function(arrays) {
    return arrays[0].map(function(_, i) {
      return arrays.map(function(array) {
        return array[i];
      });
    });
  },
  _upperRegex: /[A-Z]/,
  hasUpperCase: function(s) {
    return this._upperRegex.test(s);
  }
};

Function.prototype.curry = Function.prototype.curry || function() {
  var __slice = Array.prototype.slice, fixedArguments = __slice.call(arguments, 0), fn = this;
  return function() {
    return fn.apply(this, fixedArguments.concat(__slice.call(arguments, 0)));
  };
};

Array.copy = function(array) {
  return Array.prototype.slice.call(array, 0);
};

String.prototype.startsWith || (String.prototype.startsWith = function(str) {
  return this.substring(0, str.length) === str;
});

(typeof global !== "undefined" ? (window || global) : window).extend = function(hash1, hash2) {
  for (var key in hash2) {
    hash1[key] = hash2[key];
  }
  return hash1;
};
